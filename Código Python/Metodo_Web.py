#------------------------------------------------------------------------#
#------------------------------------------------------------------------#
# INTERFACE DE USU√ÅRIO WEB - VERS√ÉO 1.0                                  #
# DOUTORADO - PER√çODO: 2019 - 2024                                       #
# INSTITUI√á√ïES: UNIVERSIDADE FEDERAL DE S√ÉO CARLOS - UFSCar              #
#               EMBRAPA INSTRUMENTA√á√ÉO - S√ÉO CARLOS                      #
#               INSTITUTO FEDERAL DE S√ÉO PAULO - IFSP                    #         
# DOUTORANDO: RICARDO ALEXANDRE NEVES                                    #
# ORIENTADOR: DR.PAULO ESTEV√ÉO CRUVINEL                                  #
# TECNOLOGIAS: PYTHON 3, STREAMLIT (FRAMEWORK WEB), ORACLE DATABASE      #
# AMBIENTE ORACLE CLOUD                                                  #
#------------------------------------------------------------------------#
#------------------------------------------------------------------------#

# Bibliotecas
import cx_Oracle
import os
import io
from PIL import Image
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import CirclePolygon
from datetime import datetime, timedelta
import numpy as np
from scipy import stats
import scipy.interpolate as interpolate
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import math
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from hmmlearn import hmm
import cv2
from statistics import median
import warnings
import base_regras_fuzzy as regras
import functions as fun
from datetime import date, timedelta
from docx import Document
from docx.shared import Inches
import streamlit as st
import streamlit.components.v1 as components
import base64
import streamlit_nested_layout
import timeit
import time
# Ignorar os avisos de Warnings
warnings.filterwarnings('ignore')

#------------------------------------------------------------------------------------------------
# Configura√ß√µes Globais:

# Defini√ß√£o de Casas Decimais
casas_decimais=1

# Vari√°vel global para acumular os Resultados das Abordagens para o Relat√≥rio Final
global text
text=""

# Vari√°vel para defini√ß√£o de Intervalo de Janela de Tempo
intervalo=9

# Defini√ß√£o da Vari√°vel de ambiente - Acesso Oracle Database - Aplica√ß√£o em Cliente Oracle
#os.environ['TNS_ADMIN']='/lib/oracle/21/client64/lib'
# print(os.environ.get('TNS_ADMIN'))

# Defini√ß√£o de Path (Grava√ß√£o de arquivos)
path_2='fusao_dados/'
# Cria√ß√£o de diret√≥rio
if not os.path.exists(path_2):
    os.makedirs(path_2)

# Defini√ß√£o de Path (Grava√ß√£o de Relat√≥rios)
path_3='fusao_dados/relatorios/'
# Cria√ß√£o de diret√≥rio
if not os.path.exists(path_3):
    os.makedirs(path_3)

# Defini√ß√£o de Path (Grava√ß√£o de C√≥digos SQL)
path_4='fusao_dados/codigosSQL/'
# Cria√ß√£o de diret√≥rio
if not os.path.exists(path_4):
    os.makedirs(path_4)

# Defini√ß√£o dos Paths dos Relat√≥rios do Data Warehouse (Cloud)
relatorio_assunto_1='/home/opc/dashboard/Relatorios_WEB/Relatorio_Assunto_1.pdf'
relatorio_assunto_2='/home/opc/dashboard/Relatorios_WEB/Relatorio_Assunto_2.pdf'
relatorio_assunto_3='/home/opc/dashboard/Relatorios_WEB/Relatorio_Assunto_3.pdf'
relatorio_qualidade_DW='/home/opc/dashboard/Relatorios_WEB/Relatorio_Qualidade_DW.pdf'

#------------------------------------------------------------------------------------------------
# Configura√ß√µes de P√°gina Dashboard
st.set_page_config(layout="wide")

# Cria√ß√£o de Conteiners em "Abas"
tab4, tab5, tab3, tab6, tab2, tab1 = st.tabs(["Sobre o Projeto","üóÉProcessamento de Imagens","üóÉRelat√≥rio T√©cnico",\
                                                    "üóÉQualidade de Dados","üóÉRecomenda√ß√µes","üóÉDashboard"])

with tab1: # Aba "Dashboard"
    
    # Criar colunas - Exibi√ß√£o de Conteiner Relat√≥rios Aux√≠lio Tomada Decis√£o (DW)
    dash_col_0_1, dash_col_0_2, dash_col_0_3= st.columns([0.2,1.8,0.7], gap="medium")
        
    # Criar as duas primeiras colunas
    dash_col_1_1, dash_col_1_2, dash_col_1_3= st.columns([0.0001,2.5,0.7], gap="medium")

    # Criar outras duas colunas em seguida
    dash_col_2_1, dash_col_2_2, dash_col_2_3, dash_col_2_4 = st.columns([0.7,0.75,1.2,0.6], gap="medium")

with tab3: # Aba "Relat√≥rio T√©cnico"
    # Criar as duas primeiras colunas
    dash_3_col_1_1, dash_3_col_1_2= st.columns([4.7,0.5], gap="medium")

    # Criar outras quatro colunas em seguida
    dash_3_col_0_3, dash_3_col_1_3, dash_3_col_2_3, dash_3_col_3_3 = st.columns([0.9,1.6,1.6,1.4], gap="medium")

with tab6: # Aba "Qualidade de Dados"    
    # Criar as colunas iniciais
    dash_6_col_2_1, dash_6_col_2_2, dash_6_col_2_3 = st.columns([0.2,0.7,1.5], gap="medium")

    # Criar outras colunas em seguida
    dash_6_col_3_1, dash_6_col_3_2, dash_6_col_3_3 = st.columns([0.1,2,0.1], gap="medium")

with tab4: # Aba "Sobre o Projeto"
    # Logo da Aplica√ß√£o WEB
    st.image('logo_V1.png', width=400)
    
    # Breve descri√ß√£o do Projeto
    components.html(
        """
            <html>
                <hr size = 1>
                <p style="text-align: center;"><strong>Doutorado em Ci&ecirc;ncia da Computa&ccedil;&atilde;o</strong></p>
                <p style="text-align: center;"><strong>Programa de P&oacute;s-Gradua&ccedil;&atilde;o em Ci&ecirc;ncia da Computa&ccedil;&atilde;o (PPGCC)</strong></p>
                <p style="text-align: center;"><strong>&Aacute;rea de Concentra&ccedil;&atilde;o: Vis&atilde;o Computacional</strong></p>
                <p style="text-align: justify;"><strong><span style="text-align: justify; text-decoration-line: underline;">Pesquisa Intitulada</span><span style="text-align: justify;">: </span></strong>M&eacute;todo Avan&ccedil;ado para Integra&ccedil;&atilde;o de Conhecimentos Clim&aacute;ticos e de Imagens Digitais para o Monitoramento da Ferrugem Asi&aacute;tica na Cultura da Soja em Ambiente Cloud.</p>
                <div>
                    <ul>
                    <li style="text-align: justify;"><strong>Doutorando: Ricardo Alexandre Neves, Me.</strong></li>
                    <li style="text-align: justify;"><strong>Orientador: Paulo Estev&atilde;o Cruvinel, Professor Dr.</strong></li>
                    </ul>
                </div>
                <div>
                    <p style="text-align: justify;"><strong><u>Institui&ccedil;&otilde;es Envolvidas:</u> </strong></p>
                </div>
                <div>
                    <ul>
                    <li style="text-align: justify;">Universidade Federal de S&atilde;o Carlos (UFSCar) - S&atilde;o Carlos;</li>
                    <li style="text-align: justify;">Embrapa Instrumenta&ccedil;&atilde;o - S&atilde;o Carlos;</li>
                    <li style="text-align: justify;">Instituto Federal de S&atilde;o Paulo - <em>Campus</em> de S&atilde;o Jo&atilde;o da Boa Vista - SP.</li>
                    </ul>
                    <p style="text-align: justify;"><span style="color: #0000ff;">&Eacute; vi&aacute;vel o monitoramento durante o per&iacute;odo de cultivo (Ciclo de Cultura) com a utiliza&ccedil;&atilde;o das S&eacute;ries Temporais de Dados e uso de Janelamento para Amostragens Consecutivas em subper&iacute;odos de 10 dias. O primeiro per&iacute;odo de janelamento deve ser informado considerando a data inicial da ocorr&ecirc;ncia.</span></p>
                </div>
                <div>
                    <p>A Interface de Usu&aacute;rio est&aacute; organizada da seguinte forma:</p>
                </div>
                <div>
                    <ol>
                    <li style="text-align: justify;"><strong>Aba Processamento de Imagens</strong>: S&atilde;o exibidos os resultados (Imagens, C&aacute;lculos e Estat&iacute;sticas) do Processamento das Imagens nas Etapas 1 e 2 do Processo de Segmenta&ccedil;&atilde;o;&nbsp;</li>
                    <li style="text-align: justify;"><strong>Aba Relat&oacute;rio T&eacute;cnico:</strong>&nbsp;S&atilde;o exibidos&nbsp;os dados t&eacute;cnicos e gr&aacute;ficos referentes ao processamento&nbsp;&nbsp;realizado, de acordo com a janela de tempo definida;</li>
                    <li style="text-align: justify;"><strong>Aba Qualidade de Dados</strong>: S&atilde;o exibidos os dados de M&eacute;tricas <strong>MSE</strong>(<strong>Mean Squared Error</strong>), <strong>PSNR</strong>(<strong>Peak Signal-to-Noise Ratio</strong>), <strong>SSIM</strong>(<strong>Structural Similarity Index Measure</strong>);&nbsp;os <strong>Histogramas </strong>das Imagens, resultado da compara&ccedil;&atilde;o das Imagens Segmentadas na Etapa 1 e ap&oacute;s Processamento na Etapa 2; Os Gr&aacute;ficos Boxplot referentes aos dados dos "Pixels Sementes" antes e depois do Processamento com foco na Redu&ccedil;&atilde;o ou Elimina&ccedil;&atilde;o dos "Outliers";</li>
                    <li style="text-align: justify;"><strong>Aba Recomenda&ccedil;&otilde;es</strong>: Exibe o resultado do M&eacute;todo; Uma tabela de tratamentos para o controle da Ferrugem Asi&aacute;tica da Soja (F.A.S.), via Protocolos de Experimentos realizados pela EMBRAPA Soja e; Uma orienta&ccedil;&atilde;o para Boas Pr&aacute;ticas para Manejo da Soja;</li>
                    <li style="text-align: justify;"><strong>Aba Dashboard</strong>: Permite ao usu&aacute;rio realizar o processamento do M&eacute;todo para avalia&ccedil;&atilde;o da Favorabilidade da F.A.S. e visualizar os resultados no formato Dashboard; S&atilde;o exidos tamb&eacute;m os Relat&oacute;rios para Aux&iacute;lio &agrave; Tomada de Decis&atilde;o, de acordo com os Requisitos previstos no Projeto, frente a modelagem Multidimensional Elaborada, via Data Warehouse.</li>
                    </ol>
                </div>
            </html>
        """
        ,height=700)
#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Entrada de Data da Janela de Tempo
def dataJanelaTempo(intervalo, data, input_data):

    # Defini√ß√£o de Datas para uso na Janela de Tempo
    # Formato de data aceito: dd/mm/yyyy
    # Defini√ß√£o de Per√≠odo da Janela de Tempo (em dias)
    periodo=timedelta(intervalo)

    # Verifica se o formato de data de entrada est√° correto
    #   Caso n√£o esteja correto o formato "Digite novamente"
    while True:
        try:
            if data==0:
                #input_data = input('Entre com a Data Inicial da Janela de Tempo (dd/mm/yyyy): ')
                data_inicial = datetime.strptime(input_data, '%d/%m/%Y').date()
                break
            else:
                input_data = data
                data_inicial = datetime.strptime(input_data, '%d/%m/%Y').date()
                break
        except ValueError:
            print('Data em formato inv√°lido, tente novamente!')

    # Atribui√ß√£o da leitura da Data Final
    data_final=data_inicial + periodo

    # Formatar data para String (Entrada na Instru√ß√£o SQL)
    DataInicial ="'" + data_inicial.strftime('%d/%m/%Y') + "'"
    DataFinal ="'" +data_final.strftime('%d/%m/%Y')+ "'"
    print("Datas Formatadas para uso em Consulta SQL (ORACLE)\n-------------------------------------------------")
    print("Data Inicial:", DataInicial, "e Data Final:", DataFinal)

    # Exibir as datas Inicial e Final na Dashboard
    st.sidebar.header("Janela Temporal:")
    st.sidebar.text("Data Inicial:"+ str(DataInicial).strip("'"))
    st.sidebar.text("Data Final:"+ str(DataFinal).strip("'"))

    return DataInicial, DataFinal

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para conex√£o com o Oracle Autonomous Database
def conexaoAutonomousDatabase(PYTHON_USERNAME,PYTHON_PASSWORD,PYTHON_CONNECTSTRING):
    # Objeto de Conex√£o
    connection=None
    try:
        connection = cx_Oracle.connect(user=PYTHON_USERNAME, password=PYTHON_PASSWORD, dsn=PYTHON_CONNECTSTRING, encoding="UTF-8") 
    
    except cx_Oracle.Error as error:
        print(error)
    
    return connection

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Filtro das Regi√µes dos Dados Clim√°ticos Cadastrados
def filtrarRegiao():
    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql="SELECT DISTINCT REGIAO_ESTACAO_CLIMATICA FROM DADOS_CLIMATICOS"
            
            # Carregar o resultado da consulta de Regi√£o no Dataframe
            listar_regioes=pd.DataFrame(cursor.execute(sql), columns=['regiao'])

    # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    return listar_regioes

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Filtro das Localidades dos Dados Clim√°ticos
def filtrarLocalidade(regiao_selecionada):
    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)
    
    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql="SELECT DISTINCT LOCAL_ESTACAO_CLIMATICA FROM DADOS_CLIMATICOS WHERE REGIAO_ESTACAO_CLIMATICA='" + regiao_selecionada + "'"
            
            # Carregar o resultado da consulta de Regi√£o no Dataframe
            listar_localidades=pd.DataFrame(cursor.execute(sql), columns=['local'])

    # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    return listar_localidades

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para fitrar as datas de acordo com o ciclo de cultura (Localidade e Ano cadastrados)
def filtrarAno(localidade_selecionada):

    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql="SELECT DISTINCT TO_CHAR(DATA_MEDICAO, 'YYYY') FROM DADOS_CLIMATICOS WHERE LOCAL_ESTACAO_CLIMATICA='" + localidade_selecionada + \
                 "' AND PERIODO_MEDICAO='safra'"
                     
            # Carregar o resultado da consulta no Dataframe
            listar_ano=pd.DataFrame(cursor.execute(sql), columns=['anoSelecionados']).sort_values(by='anoSelecionados', ascending=False)
                        
        # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    return listar_ano

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para fitrar as datas de acordo com o ciclo de cultura (Localidade e Ano cadastrados)
def filtrarDatas(ano_selecionado, regiao_selecionada, localidade_selecionada):

    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    ### Completar com as outras Regi√µes ap√≥s o cadastro no Banco de Dados ###

    # Seleciona a Regi√£o para defini√ß√£o dos Meses Correspondentes
    #   √†s defini√ß√µes de Datas de Acordo com o Calend√°rio da Regi√£o Centro-Oeste
    # Selecionar o Ciclo de Cultura  
    #   Calend√°rio 3: Inicia em 01 de setembro + 120 dias (Ciclo-3:Set-Dez)
    #   Calend√°rio 2: Inicia em ?? de ?? + 120 dias (Ciclo-2:Set-Dez)
    #   Calend√°rio 1: Inicia em ?? de ?? + 120 dias (Ciclo-1:Set-Dez)
    if regiao_selecionada =='Regi√£o Centro-Oeste':
        data_inicial="'01/09/" + str(ano_selecionado) + "'"
        data_final="'31/12/" + str(ano_selecionado) + "'"    

    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql="SELECT DATA_MEDICAO FROM DADOS_CLIMATICOS WHERE DATA_MEDICAO BETWEEN TO_DATE("+data_inicial+ ",'DD/MM/YYYY') \
                AND TO_DATE("+data_final+ ",'DD/MM/YYYY') AND STATUS ='Ativo' AND LOCAL_ESTACAO_CLIMATICA='" + localidade_selecionada + "' ORDER BY DATA_MEDICAO"
                        
            # Carregar o resultado da consulta no Dataframe
            listar_datas=pd.DataFrame(cursor.execute(sql), columns=['datasSelecionadas'])
            # Formatar as datas de acordo com o padr√£o utilizado
            listar_datas['datasSelecionadas'] = listar_datas['datasSelecionadas'].dt.strftime('%d/%m/%Y')
            
        # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    return listar_datas

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para os componentes de filtro para entrada de dados - Dashboard
def definirFiltrosEntrada():
    # Defini√ß√£o do Ciclo de Cultura
    listar_ciclo_cultura=['Ciclo-2:Set-Dez','Ciclo-1:Jan-Abr']

    # Logo Resumido
    st.sidebar.image('logo_resumo_V1.png', width=170,)

    # Filtro por Regi√£o
    # Chamada de Fun√ß√£o para Filtro das Regi√µes dos Dados Clim√°ticos Cadastrados
    listar_regiao=filtrarRegiao()

    #********************************************************
    # Escolha da Op√ß√£o de "Regi√£o" pelo usu√°rio na Dashboard
    #********************************************************
    regiao_selecionada=st.sidebar.selectbox('Selecione a Regi√£o:', (listar_regiao))

    # Filtro por Localidade
    # Chamada de Fun√ß√£o para Filtro das Localidades dos Dados Clim√°ticos
    listar_localidade=filtrarLocalidade(regiao_selecionada)

    #************************************************************
    # Escolha da Op√ß√£o de "Localidade" pelo usu√°rio na Dashboard
    #************************************************************
    localidade_selecionada=st.sidebar.selectbox('Selecione a Localidade:', (listar_localidade))

    # Filtro por Ano
    # Chamada de Fun√ß√£o para fitrar as datas de acordo com o ciclo de cultura (Localidade e Ano cadastrados)
    listar_ano=filtrarAno(localidade_selecionada)

    #*****************************************************
    # Escolha da Op√ß√£o de "Ano" pelo usu√°rio na Dashboard
    #*****************************************************
    ano_selecionado = st.sidebar.selectbox('Selecione o Ano:', (listar_ano))

    #*****************************************************
    # Escolha da Op√ß√£o de "Ciclo de Cultura" pelo usu√°rio na Dashboard
    #*****************************************************
    ciclo_cultura = st.sidebar.selectbox('Selecione o Ciclo de Cultura:', (listar_ciclo_cultura))

    # Escolha do Ciclo de Cultura restrita para os dados "Deste estudo de Caso"
    if ciclo_cultura =='Ciclo-1:Jan-Abr':
        ciclo_cultura='Ciclo-2:Set-Dez'
        st.sidebar.error('N√£o h√° dados cadastrados para Ciclo-1:Jan-Abr', icon="üö®")
        

    # Filtro por Data
    # Chamada de Fun√ß√£o para fitrar as datas de acordo com o ciclo de cultura (Localidade e Ano cadastrados)
    listar_datas=filtrarDatas(ano_selecionado, regiao_selecionada, localidade_selecionada)
    
    #******************************************************
    # Escolha da Op√ß√£o de "Data" pelo usu√°rio na Dashboard
    #******************************************************
    data_selecionada=st.sidebar.selectbox('Selecione a Data:', (listar_datas))

    botao=st.sidebar.button("Processar M√©todo")

    return data_selecionada, botao

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para consulta de Dados Clim√°ticos (Janela de Tempo) no Banco ORACLE 
def consultarDadosClimaticos(connection, DataInicial, DataFinal):
    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql="SELECT * FROM dados_climaticos WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial + \
                ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')" + "ORDER BY DATA_MEDICAO"

                ### SQL do Banco Oracle
                    #SELECT * FROM "ADMIN"."dados_climaticos"
                    #WHERE DATA_MEDICAO BETWEEN TO_DATE('01/01/2000', 'DD/MM/YYYY')
                    #AND TO_DATE('11/02/2000', 'DD/MM/YYYY')

            # Carregar o resultado da consulta no DataFrame
            df_consulta_bd=pd.DataFrame(cursor.execute(sql), columns=['idDadosClimaticos','idProjetos',\
                'localEstacaoClimatica','periodoMedicao','dataMedicao','precipitacao', 'temperaturaMaxima',\
                'temperaturaMinima','umidadeRelativa','pontoOrvalho','temperaturaMedCompensada','regiaoEstacaoClimatica','status'])
            print(df_consulta_bd)

            # Contagem de linhas dataframe
            linhas_df_consulta_bd=df_consulta_bd.shape[0]

            # Verifica√ß√£o se o resultado da consulta ao Banco de Dados Oracle n√£o retorna vazia
            if df_consulta_bd.empty:
                print("Consulta no per√≠odo:", DataInicial, "e:", DataFinal, "n√£o retornaram dados. Inserir outra data para processamento!!")
                raise SystemExit

            # Verifica√ß√£o se o resultado da consulta ao Banco de Dados Oracle retorna, no m√≠nimo, 4 linhas (dias) de dadaos clim√°ticos.
            #   => 4 dias s√£o dados m√≠nimos para o processamento dos dados na etapa de "Interpola√ß√£o de Dados -> C√°lculo da Spline C√∫bica"
            if linhas_df_consulta_bd <4:
                print("Consulta no per√≠odo:", DataInicial, "e:", DataFinal, "retornam somente " + str(linhas_df_consulta_bd) +\
                    " linhas. Dados insuficientes. \nInserir outra data para processamento!!")
                raise SystemExit

    # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            print(sql)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    return df_consulta_bd

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para gerar a lista de dados interpolados, de acordo com as Vari√°veis clim√°ticas
def preparaDadosInterpolacao(df_consulta_bd):

    lista_interpolacao=[]
    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Precipita√ß√£o"
    # Coluna precipitacao com valores absolutos
    coluna_precipitacao=[abs(ele) for ele in df_consulta_bd['precipitacao']]
    lista_interpolacao.append(coluna_precipitacao)
    
    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Temperatura M√°xima"
    # Coluna temperaturaMaxima com valores absolutos
    coluna_temperatura_maxima=[abs(ele) for ele in df_consulta_bd['temperaturaMaxima']]
    lista_interpolacao.append(coluna_temperatura_maxima)

    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Temperatura M√≠nima"
    # Coluna temperaturaMinima com valores absolutos
    coluna_temperatura_minima=[abs(ele) for ele in df_consulta_bd['temperaturaMinima']]
    lista_interpolacao.append(coluna_temperatura_minima)

    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Umidade Relativa"
    # Coluna umidadeRelativa com valores absolutos
    coluna_umidade_relativa=[abs(ele) for ele in df_consulta_bd['umidadeRelativa']]
    lista_interpolacao.append(coluna_umidade_relativa)

    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Ponto de Orvalho"
    # Coluna pontoOrvalho com valores absolutos
    coluna_ponto_orvalho=[abs(ele) for ele in df_consulta_bd['pontoOrvalho']]
    lista_interpolacao.append(coluna_ponto_orvalho)

    # Eixo "Y" para Interpola√ß√£o: Dados da coluna "Temperatura M√©dia Compensada"
    # Coluna temperaturaMedCompensada com valores absolutos
    coluna_temperatura_med_compensada=[abs(ele) for ele in df_consulta_bd['temperaturaMedCompensada']]
    lista_interpolacao.append(coluna_temperatura_med_compensada)

    # Eixo "X" para Interpola√ß√£o
    # Pegar a quantidade de linhas da consulta do Dataframe para definir a quantidade igual aos dados de "Y"
    X=list(range(1,df_consulta_bd['precipitacao'].shape[0]+1))

    # Gerar os Labels para o Gr√°fico de Interpola√ß√£o (Eixo X)
    labels=[]
    for i in range(1,len(X)+1):
        labels.append("Ponto " + str(i))  
   
    return X, lista_interpolacao, labels

# --------------------------------------------------------------------------------------

# Fun√ß√£o para Calcular o Ajuste da Curva - Polin√¥mios (FIT)
def calcularAjusteCurva(x,y,labels,descricao,tab, flag):
    # Dados de Entrada
    x = np.array(x)
    y = np.array(y)

    # Ajuste da curva a um polin√¥mio
    p1 = np.polyfit(x,y,1)
    p2 = np.polyfit(x,y,2)
    p3 = np.polyfit(x,y,3)
    p4 = np.polyfit(x,y,4)
    p5 = np.polyfit(x,y,5)

    # Rotina para determina√ß√£o do valor de R da equa√ß√£o da reta
    slope,intercept,r_value,p_value,std_err = stats.linregress(x,y)

    # C√°lculo dos coeficientes de determina√ß√£o dos polin√¥mios de ordem 2 √† 5
    yfit2 = p2[0] * pow(x,2) + p2[1] * x + p2[2]
    yresid2 = y - yfit2
    SQresid = sum(pow(yresid2,2))
    SQtotal = len(y) * np.var(y)
    R2_2 = 1 - SQresid/SQtotal

    yfit3 = p3[0] * pow(x,3) + p3[1] * pow(x,2) + p3[2] * x + p3[3]
    yresid3 = y - yfit3
    SQresid = sum(pow(yresid3,2))
    SQtotal = len(y) * np.var(y)
    R2_3 = 1 - SQresid/SQtotal

    yfit4 = p4[0] * pow(x,4) + p4[1] * pow(x,3) + p4[2] * pow(x,2) + p4[3] * x + p4[4]
    yresid4 = y - yfit4 
    SQresid = sum(pow(yresid4,2))
    SQtotal = len(y) * np.var(y) 
    R2_4 = 1 - SQresid/SQtotal

    yfit5 = p5[0] * pow(x,5) + p5[1] * pow(x,4) + p5[2] * pow(x,3) + p5[3] * pow(x,2) + p5[4] * x + p5[5]
    yresid5 = y - yfit5
    SQresid = sum(pow(yresid5,2))
    SQtotal = len(y) * np.var(y)
    R2_5 = 1 - SQresid/SQtotal

    # Impress√£o dos Resultados
    print('Equa√ß√£o da reta')
    print('Coeficientes',p1,'R2 =',pow(r_value,2))
    print('Polin√¥mio de ordem 2')
    print('Coeficientes',p2,'R2 =',R2_2)
    print('Polin√¥mio de ordem 3')
    print('Coeficientes',p3,'R2 =',R2_3)
    print('Polin√¥mio de ordem 4')
    print('Coeficientes',p4,'R2 =',R2_4)
    print('Polin√¥mio de ordem 5')
    print('Coeficientes',p5,'R2 =',R2_5)

    # Interpola√ß√£o
    new_length = 50
    new_x = np.linspace(x.min(), x.max(), new_length)
    temp= interpolate.splrep(x, y, k=3)
    new_y = interpolate.splev(new_x, temp, der=0)
    new_p2=interpolate.interp1d(x,np.polyval(p2,x), kind='linear')(new_x)
    new_p3=interpolate.interp1d(x,np.polyval(p3,x), kind='linear')(new_x)
    new_p4=interpolate.interp1d(x,np.polyval(p4,x), kind='linear')(new_x)
    new_p5=interpolate.interp1d(x,np.polyval(p5,x), kind='linear')(new_x)
    
    # Plotagem dos gr√°ficos - Interpola√ß√£o com Spline C√∫bica
    
    fig_0=plt.figure(figsize=(10,10))
    plt.plot(x,y,'o')
    plt.style.use('default')

    # Plot polin√¥mios de grau 1 at√© 5
    plt.subplot(2,2,1)
    plt.plot(x,y,'go')
    plt.plot(x,np.polyval(p1,x), 'g', label = 'Reta')
    plt.plot(x,np.polyval(p2,x), 'b-.', label = 'Grau 2')
    plt.plot(x,np.polyval(p3,x), label = 'Grau 3',color ='r')
    plt.plot(x,np.polyval(p4,x), label = 'Grau 4',color ='k')
    plt.plot(x,np.polyval(p5,x), 'c', label = 'Grau 5')
    plt.title("Gr√°fico de Dados Sem Interpola√ß√£o")
    plt.xlabel("Dados Janela Temporal: "+str(descricao))
    plt.ylabel("Valores")
    plt.xticks(x, labels, rotation='vertical')
    plt.legend()

    fig_1=plt.figure(figsize=(10,10))

    # Plot com Interpola√ß√£o e Spline C√∫bica
    plt.subplot(2,2,2)
    plt.plot(x,y,'go')
    plt.plot(new_x,new_p2, 'b', label = 'Grau 2')
    plt.plot(new_x,new_p3, 'r', label = 'Grau 3')
    plt.plot(new_x,new_p4, 'k:.', label = 'Grau 4')
    plt.plot(new_x,new_p5, 'c', label = 'Grau 5')
    plt.plot(new_x, new_y,'m--', label = 'Spline C√∫bica')
    plt.title("Gr√°fico Dados Interpolados")
    plt.xlabel("Dados Janela Temporal: " + str(descricao))
    plt.ylabel("Valores")
    plt.xticks(x, labels, rotation='vertical')
    plt.legend()
    plt.show()

    #*********************************************
    # Plotar Gr√°fico de Interpola√ß√£o na Dashboard
    #*********************************************

    # Verificar se o Gr√°fico a ser plotado √©:
    #   "Sem intepola√ß√£o - fig_0" ou
    #   "Com intepola√ß√£o - fig_1"
    with tab:
        if flag ==0:
            dash_3_col_1_3.pyplot(fig_0)
        
        if flag ==1:
            dash_3_col_2_3.pyplot(fig_1)

    return new_x, new_y

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Processamento de Interpola√ß√£o
def processarInterpolacao(X,labels,lista_interpolacao,tab,flag):
    # Criar Dataframe para armazenar os resultados das interpola√ß√µes
    df_interpolar=pd.DataFrame(columns=['Y'])
    
    # Descri√ß√£o das Vari√°veis para uso nos gr√°ficos
    descricao_variavel=['Precipita√ß√£o','Temperatura Maxima','Temperatura M√≠nima','Umidade Relativa',\
        'Ponto Orvalho','Temperatura Med.Compensada']
    
    # Gerar lista chave/valor (valor de cada vari√°vel/descri√ß√£o)
    lista_chave_valor=list(zip(descricao_variavel,lista_interpolacao))

    # Loop para processamento das interpola√ß√µes e gera√ß√£o dos gr√°ficos correspondentes por vari√°vel
    for chave,valor in lista_chave_valor:
        # Chamada de Fun√ß√£o para Calcular o Ajuste da Curva - Polin√¥mios (FIT)
        new_x, new_y = calcularAjusteCurva(X,valor,labels,chave,tab,flag)
        # Salvar dados de Interpola√ß√£o calculado para cada vari√°vel
        df_interpolar=df_interpolar.append({'Y':new_y},ignore_index=True)
    
    df_interpolar=df_interpolar.round(casas_decimais)
    
    return df_interpolar, np.around(new_y,casas_decimais)

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para selecionar os dados interpolados para completar os dados faltantes "df_consulta_bd"
# -> DataFrame de dados Clim√°ticos (De acordo com o intervalo definido)
def buscarValoresInterpolados(dados_interpolados, intervalo):
    dados_interpolados= list(dados_interpolados)
    vetor_dados=[]
    controle=0

    for pos in range(len(dados_interpolados)):
        if controle<pos:
            vetor_dados.append(dados_interpolados[controle])
            controle+=intervalo            
    return vetor_dados

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para processamento dos valores interpolados para completar (se necess√°rio) o conjunto de dados com os dados faltantes
def processarCompletarDadosInterpolados(df_interpolar,df_consulta_bd,tab):

    consulta_bd_aux=[]

    #   -> Trocar o valor da coluna 'Status" para o valor "Original"
    #   -> "Original" significa que os valores N√ÉO s√£o originados do "Processo de Interpola√ß√£o"
    if not df_consulta_bd.empty:
        df_consulta_bd['status'] ='Original'

    # Chamada de Fun√ß√£o para selecionar os dados interpolados para completar os dados faltantes "df_consulta_bd"
    # -> Alimentar o restante dos dados
    # -> Cada itera√ß√£o alimenta uma vari√°vel ('precipitacao', 'temperaturaMaxima','temperaturaMinima','umidadeRelativa',
    #                                         'pontoOrvalho','temperaturaMedCompensada')  
    for contador in range(len(df_interpolar)):
        vetor_dados=buscarValoresInterpolados(np.hstack(df_interpolar.loc[contador].to_numpy()).round(casas_decimais), 5)
        # Loop no "vetor_dados" para atribuir "como absolutos" os valores interpolados (percorridos)
        consulta_bd_aux.append([abs (ele) for ele in vetor_dados])    
    # Montar o Dataframe Auxiliar com os dados interpolados
    df_consulta_bd_aux=pd.DataFrame(np.asarray(consulta_bd_aux).T, columns=['precipitacao', 'temperaturaMaxima','temperaturaMinima',\
            'umidadeRelativa','pontoOrvalho','temperaturaMedCompensada'])
    #print(df_consulta_bd_aux)
    
    # Contagem de linhas dataframe
    linhas_df_consulta_bd=df_consulta_bd.shape[0]

    # Contagem de linhas faltantes
    linhas_faltantes=(intervalo-linhas_df_consulta_bd)+1

    # Pegar a √∫ltima linha do Dataframe auxiliar nas colunas de interesse
    lista_colunas=['idDadosClimaticos','idProjetos','localEstacaoClimatica','periodoMedicao','dataMedicao','regiaoEstacaoClimatica']
    ultima_linha_df= df_consulta_bd[0:linhas_df_consulta_bd].iloc[-1]
    vetor_linha_auxiliar=[]
    contador=0

    # Gerar o conjunto Auxiliar de dados Interpolados com as vari√°veis de interesse
    for colunas in lista_colunas:
        vetor_linha_auxiliar.append(ultima_linha_df[colunas])
        df_consulta_bd_aux.insert(contador,lista_colunas[contador],ultima_linha_df[colunas])
        contador+=1
               
    # Apagar as linhas "desnecess√°rias" do conjunto Auxiliar dados Interpolados com as vari√°veis de interesse
    df_consulta_bd_aux=df_consulta_bd_aux.drop(list(range(linhas_faltantes,len(df_consulta_bd_aux))))  
    print(df_consulta_bd_aux)

    # Completar o conjunto principal de dados com os dados faltantes (Interpolados)

    # Se o Conjunto Auxiliar for diferente de "vazio": 
    #   -> Significa que h√° dados interpolados √† acrescentar no Conjunto Inicial, ent√£o:      
    #   -> Acrescentar a coluna 'Status" com o valor 'Interpolado'
    if not df_consulta_bd_aux.empty:
        df_consulta_bd_aux=df_consulta_bd_aux.assign(status ='Interpolado')    

    # Concatenar os Dataframes (inicial) e (dados auxiliares) para complementar os dados faltantes
    df_consulta_bd=pd.concat([df_consulta_bd,df_consulta_bd_aux],ignore_index=True)    
    print("Dados prontos para processamento:")
    print(df_consulta_bd)

    #=======================================================================
    # Chamada de Fun√ß√£o para gerar a lista de dados interpolados, de acordo com as Vari√°veis clim√°ticas
    X, lista_interpolacao, labels=preparaDadosInterpolacao(df_consulta_bd)

    #=======================================================================
    # Chamada de Fun√ß√£o para Processamento de Interpola√ß√£o
    df_interpolar,new_y=processarInterpolacao(X,labels,lista_interpolacao,tab3,1)
    #=======================================================================

    #****************************************************
    # Exibir o dataframe de dados completos no Dashboard
    #****************************************************
    with tab:
        dash_3_col_1_1.subheader("Dados Clim√°ticos - Janela Temporal:")
        # Ajustar os nomes das colunas (Formata√ß√£o para Visualiza√ß√£o)
            # Copiar o Dataframe para outra vari√°vel para n√£o alterar o Dataframe Original
            #   -> Continuar o restante do c√≥digo com o "df_consulta_bd" original
            #   -> Usar "df_consulta_bd_view" somente para visualiza√ß√£o na Interface
        df_consulta_bd_view=df_consulta_bd.copy()
        df_consulta_bd_view = df_consulta_bd_view.rename(columns={'idDadosClimaticos':'ID. Dados Clim.','idProjetos':'ID.Projeto',     \
            'localEstacaoClimatica':'Esta√ß√£o Clim√°tica','regiaoEstacaoClimatica':'Regi√£o','status':'Status',                           \
            'precipitacao': 'Precipita√ß√£o','temperaturaMaxima':'Temp. M√°xima','temperaturaMinima':'Temp. M√≠nima',                      \
            'umidadeRelativa':'Umidade Relativa','pontoOrvalho':'Ponto de Orvalho','temperaturaMedCompensada':'Temp. M√©dia Compensada',\
            'dataMedicao':'Data Medi√ß√£o','periodoMedicao':'Per√≠odo'})
                
        # Formata√ß√£o para precis√£o da colunas "Float" e "Date"
        dash_3_col_1_1.dataframe(df_consulta_bd_view.style.format({'Precipita√ß√£o':'{:.2f}',           \
            'Temp. M√°xima':'{:.2f}','Temp. M√≠nima':'{:.2f}','Umidade Relativa':'{:.2f}',\
            'Ponto de Orvalho':'{:.2f}','Temp. M√©dia Compensada':'{:.2f}',                         \
            'Data Medi√ß√£o':lambda t: t.strftime('%d/%m/%Y')}))        
        
    return df_consulta_bd

#------------------------------------------------------------------------------------------------

#Fun√ß√£o Regra 01 -> (Per√≠odo de Molhamento Foliar)
def regra01(df_consulta_bd,casas_decimais):
   # Se per√≠odo de Molhamento Foliar (umidade relativa) maior ou igual a 90%
  regra_1= df_consulta_bd[(df_consulta_bd['umidadeRelativa']>=90)]
  if not regra_1.empty:
      flag_regra_1="Alta"
      medianaRegra_01=round(regra_1['umidadeRelativa'].median(),casas_decimais)
      # Mostrar o Resultado
      print("Mediana Regra 1:",medianaRegra_01)
      print("Per√≠odo Molhamento Foliar:", flag_regra_1)
      print(regra_1)

  # Se consulta (Regra Alta) retorna vazio - Verificar (Regra M√©dia)
  if regra_1.empty:
      regra_1= df_consulta_bd[(df_consulta_bd['umidadeRelativa']>=80) & (df_consulta_bd['umidadeRelativa']<90)]
      if not regra_1.empty:
          flag_regra_1="M√©dia"
          medianaRegra_01=round(regra_1['umidadeRelativa'].median(),casas_decimais)
          # Mostrar o Resultado
          print("Mediana Regra 1:",medianaRegra_01)
          print("Per√≠odo Molhamento Foliar:", flag_regra_1)
          print(regra_1)

      # Se consulta (Regra M√©dia) retorna vazio - Verificar (Regra Baixa)
      if regra_1.empty:
          regra_1= df_consulta_bd[(df_consulta_bd['umidadeRelativa']<80) & (df_consulta_bd['umidadeRelativa']>0)]
          if not regra_1.empty:
            flag_regra_1="Baixa"
            medianaRegra_01=round(regra_1['umidadeRelativa'].median(),casas_decimais)
            # Mostrar o Resultado
            print("Mediana Regra 1:",medianaRegra_01)
            print("Per√≠odo Molhamento Foliar:", flag_regra_1)
            print(regra_1)

      ## Se consulta (Regra Baixa) retorna vazio      
      if regra_1.empty:
          medianaRegra_01=0
          flag_regra_1='Baixa'
          # Mostrar o Resultado
          print("Mediana Regra 1:", medianaRegra_01)
          print("Per√≠odo Molhamento Foliar:",flag_regra_1)
          print("N√£o h√° dados da REGRA_2 para serem visualizados!!")

  return medianaRegra_01, regra_1, flag_regra_1

#------------------------------------------------------------------------------------------------

#Fun√ß√£o Regra 02 -> (Per√≠odo M√≠nimo de Molhamento Foliar)
def regra02(df_consulta_bd,casas_decimais):
    #  Se precipita√ß√£o for maior que 6h - equivale a 1/4 de 24h
    #              (Ent√£o: Se Precipita√ß√£o maior ou igual a 25% - equivale a 1/4 de 100%)
    regra_2= df_consulta_bd[(df_consulta_bd['precipitacao']>=25)]
    if not regra_2.empty:
        medianaRegra_02=round(regra_2['precipitacao'].median(),casas_decimais)
        flag_regra_2="Alta"
        # Mostrar o Resultado
        print("Mediana Regra 2:", medianaRegra_02)
        print("Per√≠odo M√≠nimo Molhamento Foliar:", flag_regra_2)
        print(regra_2)

    # Se consulta (Regra Alta) retorna vazio - Verificar (Regra M√©dia)
    if regra_2.empty:
        regra_2= df_consulta_bd[(df_consulta_bd['precipitacao']<25) & (df_consulta_bd['precipitacao']>=20)]
        if not regra_2.empty:
            medianaRegra_02=round(regra_2['precipitacao'].median(),casas_decimais)
            flag_regra_2="M√©dia"
            # Mostrar o Resultado
            print("Mediana Regra 2:", medianaRegra_02)
            print("Per√≠odo M√≠nimo Molhamento Foliar:", flag_regra_2)
            print(regra_2)

    # Se consulta (Regra M√©dia) retorna vazio - Verificar (Regra Baixa)
    if regra_2.empty:
        regra_2= df_consulta_bd[(df_consulta_bd['precipitacao']<20) & (df_consulta_bd['precipitacao']>0) ]
        if not regra_2.empty:
            medianaRegra_02=round(regra_2['precipitacao'].median(),casas_decimais)
            flag_regra_2="Baixa"
            # Mostrar o Resultado
            print("Mediana Regra 2:", medianaRegra_02)
            print("Per√≠odo M√≠nimo Molhamento Foliar:", flag_regra_2)
            print(regra_2)

    # Se consulta (Regra Baixa) retorna vazio
    if regra_2.empty:
        medianaRegra_02=0
        flag_regra_2='Baixa'
        # Mostrar o Resultado
        print("Mediana Regra 2:", medianaRegra_02)
        print("Per√≠odo M√≠nimo Molhamento Foliar:",flag_regra_2)
        print("N√£o h√° dados da REGRA_2 para serem visualizados!!")   

    return medianaRegra_02, regra_2, flag_regra_2

#------------------------------------------------------------------------------------------------

#Fun√ß√£o Regra 03
def regra03(df_consulta_bd,casas_decimais):
    flag_df=1
    # Se a Faixa de Temperatura estiver entre 18 a 26.5¬∞C
    regra_3= df_consulta_bd[(df_consulta_bd['temperaturaMinima']>=18) & (df_consulta_bd['temperaturaMaxima']<=26.5)]
    if not regra_3.empty:
        ## Tempertatura Inicial (Temperatura M√≠nima)
        medianaRegra_03_1=round(regra_3['temperaturaMinima'].median(),casas_decimais)
        ## Tempertatura Final (Temperatura M√°xima)
        medianaRegra_03_2=round(regra_3['temperaturaMaxima'].median(),casas_decimais)
        flag_regra_3="Alta"
        # Mostrar o Resultado
        print("Mediana Regra 3 - Temperatura Inicial:",medianaRegra_03_1)
        print("Mediana Regra 3 - Temperatura Final:",medianaRegra_03_2)
        print("Faixa de Temperatura:", flag_regra_3)
        print(regra_3)
    
    # Se consulta (Regra Alta) retorna vazio - Verificar (Regra M√©dia)
    if regra_3.empty:       
        regra_3= df_consulta_bd[(df_consulta_bd['temperaturaMinima']>=15.1) & (df_consulta_bd['temperaturaMaxima']<=17.9)]
        if not regra_3.empty:
            ## Tempertatura Inicial (Temperatura M√≠nima)
            medianaRegra_03_1=round(regra_3['temperaturaMinima'].median(),casas_decimais)
            ## Tempertatura Final (Temperatura M√°xima)
            medianaRegra_03_2=round(regra_3['temperaturaMaxima'].median(),casas_decimais)
            flag_regra_3="M√©dia"
            # Mostrar o Resultado
            print("Mediana Regra 3 - Temperatura Inicial:",medianaRegra_03_1)
            print("Mediana Regra 3 - Temperatura Final:",medianaRegra_03_2)
            print("Faixa de Temperatura:", flag_regra_3)
            print(regra_3)
    
    # Se consulta (Regra M√©dia) retorna vazio - Verificar (Regra Baixa)
    if regra_3.empty:
        regra_3= df_consulta_bd[(df_consulta_bd['temperaturaMinima']>=0) & (df_consulta_bd['temperaturaMaxima']<=15)]   
        if not regra_3.empty:
            ## Tempertatura Inicial (Temperatura M√≠nima)
            medianaRegra_03_1=round(regra_3['temperaturaMinima'].median(),casas_decimais)
            ## Tempertatura Final (Temperatura M√°xima)
            medianaRegra_03_2=round(regra_3['temperaturaMaxima'].median(),casas_decimais)
            flag_regra_3="Baixa"
            # Mostrar o Resultado
            print("Mediana Regra 3 - Temperatura Inicial:",medianaRegra_03_1)
            print("Mediana Regra 3 - Temperatura Final:",medianaRegra_03_2)
            print("Faixa de Temperatura:", flag_regra_3)
            print(regra_3)

    # Se consulta (Regra Baixa) retorna vazio
    if regra_3.empty:
        flag_df=0
        ## Temperatura Inicial (Temperatura M√≠nima)
        medianaRegra_03_1=0
        ## Temperatura Final (Temperatura M√°xima)
        medianaRegra_03_2=0
        flag_regra_3="Baixa"
        regra_3=0
        # Mostrar o Resultado
        print("Mediana Regra 3 - Temperatura Inicial:",medianaRegra_03_1)
        print("Mediana Regra 3 - Temperatura Final:",medianaRegra_03_2)
        print("Faixa de Temperatura:",flag_regra_3)
        print("N√£o h√° dados da REGRA_3 para serem visualizados!!")        
        
    return medianaRegra_03_1, medianaRegra_03_2, regra_3, flag_regra_3, flag_df

#------------------------------------------------------------------------------------------------

#Fun√ß√£o Regra 04
def regra04(df_consulta_bd,casas_decimais):
    # Maior Temperatura da Janela (Temperatura M√°xima)
    regra_4_valor= df_consulta_bd['temperaturaMaxima'].max()
    # Flag para verifica√ß√£o da situa√ß√£o de Favorabilidade da vari√°vel "Temperatura M√°xima"
    flag_regra_4=""

    # Compara se o valor da maior Temperatura M√°xima dentro da faixa de favorabilidade (Baixa, M√©dia ou Alta)
    if (regra_4_valor>=18) & (regra_4_valor<=26.5):
        flag_regra_4="Alta"
        regra_4=1

    elif ((regra_4_valor>=15.1) & (regra_4_valor<=17.9)) | ((regra_4_valor>26.5) & (regra_4_valor<=30)) :
        flag_regra_4="M√©dia"
        regra_4=1
        
    elif ((regra_4_valor>0) & (regra_4_valor<=15)) | ((regra_4_valor>30) & (regra_4_valor<=42)):
        flag_regra_4="Baixa"
        regra_4=1

    # Temperatura de corte = 42 Graus (Erro de medi√ß√£o). 
    elif (regra_4_valor==0) | (regra_4_valor>42):
        flag_regra_4="Baixa"
        regra_4=0
                    
    # Mostrar o Resultado
    print("Temperatura M√°xima da Janela (valor):",regra_4_valor)
    print("Valor de Favorabilidade (Regra 4):",flag_regra_4)
    print("Valor (Regra 4):",regra_4)

    return regra_4, regra_4_valor, flag_regra_4

#------------------------------------------------------------------------------------------------

#Fun√ß√£o Regra 05
def regra05(df_consulta_bd,casas_decimais):
    # Menor Temperatura da Janela (Temperatura M√≠nima)
    regra_5_valor= df_consulta_bd['temperaturaMinima'].min()
    # Compara se o valor da maior Temperatura M√≠nima est√° dentro da faixa de favorabilidade
    if (regra_5_valor>=18) & (regra_5_valor<=26.5):
        flag_regra_5="Alta"
        regra_5=1

    elif ((regra_5_valor>=15.1) & (regra_5_valor<=17.9)) | ((regra_5_valor>26.5) & (regra_5_valor<=30)) :
        flag_regra_5="M√©dia"
        regra_5=1
        
    elif ((regra_5_valor>=0) & (regra_5_valor<=15)) | (regra_5_valor>30):
        flag_regra_5="Baixa"
        regra_5=1
    
    elif (regra_5_valor<=-1):
        flag_regra_5="Baixa"
        regra_5=0
            
    # Mostrar o Resultado
    print("Temperatura M√≠nima da Janela (valor):",regra_5_valor)
    print("Valor de Favorabilidade (Regra 5):",flag_regra_5)
    print("Valor (Regra 5):",regra_5)

    return regra_5, regra_5_valor, flag_regra_5

#------------------------------------------------------------------------------------------------

# Fun√ß√£o Regra 06
def regra06(df_consulta_bd,casas_decimais):
    # Calcular a diferen√ßa do Ponto de Orvalho e Temperatura M√©dia Compensada 
    #   -> Se Temperatura M√©dia Compensada for menor que (2 graus) que o Ponto de Orvalho
    regra_6=df_consulta_bd[(df_consulta_bd['temperaturaMedCompensada'] - (df_consulta_bd['pontoOrvalho'])) <=2]
    # Mostrar o Resultado
    if regra_6.empty:        
            ## Se o valor √© vazio "NAN"
            # => quando o resultado da consulta (BD) retorna vazio
        medianaRegra_06=0
        flag_regra_6="Baixa"
        print("Mediana Regra 06:",medianaRegra_06)
        print("Valor de Favorabilidade (Regra 6):",flag_regra_6)
        print("N√£o h√° dados da REGRA_6 para serem visualizados!!")
    else:
        medianaRegra_06_PO=round(regra_6['pontoOrvalho'].median(),casas_decimais)
        medianaRegra_06_TEMP=round(regra_6['temperaturaMedCompensada'].median(),casas_decimais)
        # Diferen√ßa entre Temperatura e Ponto de Orvalho
        medianaRegra_06=abs(round(medianaRegra_06_PO - medianaRegra_06_TEMP, casas_decimais))
        flag_regra_6="Alta"
        print("Mediana Regra 06 - Ponto Orvalho:",medianaRegra_06_PO)
        print("Mediana Regra 06 - Temperatura M√©dia Compensada:",medianaRegra_06_TEMP)
        print("Mediana Regra 06:",medianaRegra_06)
        print("Valor de Favorabilidade (Regra 6):",flag_regra_6)
        print(regra_6)

    return regra_6, medianaRegra_06, flag_regra_6

#------------------------------------------------------------------------------------------------

# Fun√ß√£o Regra 07
def regra07(DataInicial,DataFinal):
    # Verificar se a imagem tem a doen√ßa (0-> Sem a doen√ßa e 1-> Com a presen√ßa da doen√ßa)
    # Dados do Cultivar /dados de classifica√ß√£o da imagem

    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql_1="SELECT RESULTADO                                        \
                 FROM CLASSIFICACOES                                       \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)    \
                                             FROM IMAGEM_CLIMA_FAVORAB     \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
                                    
            # Carregar o resultado da consulta no DataFrame
            resultado_classificacao=pd.DataFrame(cursor.execute(sql_1),columns=['Resultado'])

            # Consulta no Banco de Dados Oracle
            sql_2="SELECT ID_IMG_SEGMENTADAS                             \
                 FROM IMAGENS_SEGMENTADAS                                \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)  \
                                             FROM IMAGEM_CLIMA_FAVORAB   \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))\
                ORDER BY ID_IMG_SEGMENTADAS "
                                                       
            # Carregar o resultado da consulta no DataFrame
            df_consulta_img=pd.DataFrame(cursor.execute(sql_2), columns=['idDadosClimaticos'])

            #*********************************************
            # Consultas Classifica√ß√£o - Exibi√ß√£o Dashboard
            #*********************************************

            # Consulta Relat√≥rio Classifica√ß√£o (Banco de Dados Oracle)
            sql_3="SELECT RELATORIO_CLASSIFICACAO                         \
                 FROM CLASSIFICACOES                                      \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)   \
                                             FROM IMAGEM_CLIMA_FAVORAB    \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
            # Executar comando SQL
            cursor.execute(sql_3)
                                 
            # Recebe Dados tipo CLOB do Banco ORACLE
            for row in cursor:
                df_consulta_relat_classificacao=pd.DataFrame([[row[0].read()]], columns=['relatorioClassificacao'])

            # Consulta Matriz de Confus√£o (Banco de Dados Oracle)
            sql_4="SELECT MATRIZ_CONFUSAO                                 \
                 FROM CLASSIFICACOES                                      \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)   \
                                             FROM IMAGEM_CLIMA_FAVORAB    \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
            # Executar o c√≥digo SQL
            cursor.execute(sql_4)

            # Recebe imagem BLOB do Banco ORACLE
            data_ref_1 = cursor.fetchall()
            image_ref_1 = data_ref_1[0][0].read()
                        
            # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
            image_ref_1 = np.asarray(Image.open(io.BytesIO(image_ref_1)))
            
            # Consulta Relat√≥rio Classifica√ß√£o (Banco de Dados Oracle)
            sql_5="SELECT CURVA_ROC                                       \
                 FROM CLASSIFICACOES                                      \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)   \
                                             FROM IMAGEM_CLIMA_FAVORAB    \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
            # Executar o c√≥digo SQL
            cursor.execute(sql_5)

            # Recebe imagem BLOB do Banco ORACLE
            data_ref_2 = cursor.fetchall()
            image_ref_2 = data_ref_2[0][0].read()
                        
            # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
            image_ref_2 = np.asarray(Image.open(io.BytesIO(image_ref_2)))

            # Consulta no Banco de Dados Oracle (Inst√¢ncias duplicadas)
            sql_6="SELECT TUPLAS_BINARIAS_LIMPAS                           \
                 FROM CLASSIFICACOES                                       \
                 WHERE ID_BANCO_IMAGENS = (SELECT MIN(ID_BANCO_IMAGENS)    \
                                             FROM IMAGEM_CLIMA_FAVORAB     \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
            
            # Carregar o resultado da consulta no DataFrame
            df_instancias_duplicadas=pd.DataFrame(cursor.execute(sql_6),columns=['TUPLAS BINARIAS LIMPAS'])
            
            # Consulta no Banco de Dados Oracle (ID cadastro da rela√ß√£o imagem, dados clim√°ticos e favorabilidade)
            #   => uso nas recomenda√ß√µes para indicar os dados de plantas_soja 
            sql_7="SELECT MIN(ID_DADOS_PLANTA_SOJA) FROM IMAGEM_CLIMA_FAVORAB WHERE ID_BANCO_IMAGENS =    \
                                            (SELECT MIN(ID_BANCO_IMAGENS) FROM IMAGEM_CLIMA_FAVORAB       \
                                             WHERE ID_DADOS_CLIMATICOS = (SELECT MIN(ID_DADOS_CLIMATICOS) \
                                                                          FROM DADOS_CLIMATICOS           \
                                                                          WHERE DATA_MEDICAO BETWEEN TO_DATE(" + DataInicial +          \
                                                                            ",'DD/MM/YYYY') and TO_DATE("+ DataFinal + ",'DD/MM/YYYY')))"
                                    
            # Carregar o resultado da consulta no DataFrame
            df_id_imagem_clima_favorab=pd.DataFrame(cursor.execute(sql_7),columns=['ID_IMAGEM_CLIMA_FAVORAB'])

    # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            print(sql_2)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    # Carregar a Imagem Segmentada de Refer√™ncia no "subplot" (posi√ß√£o 1)
    fig_matriz_curva_classificacao = plt.figure(figsize = (25,25))
    plt.subplot(1, 5, 1)
    plt.axis('off')
    plt.imshow(image_ref_1)

    #------------------------------
    # Carregar a Imagem Canal Verde no "subplot" (posi√ß√£o 2)
    plt.subplot(1, 5, 2)
    plt.axis('off')
    plt.imshow(image_ref_2)

    if not resultado_classificacao.empty:
        regra_7=int(resultado_classificacao['Resultado'])

        if int(resultado_classificacao['Resultado'])==1:
            flag_regra_7="Alta"
        elif int(resultado_classificacao['Resultado'])==0:
            flag_regra_7="Baixa"
        
        # Mostrar o Resultado
        print("Valor de Favorabilidade (Regra 7):",int(resultado_classificacao['Resultado']))
        print("Valor de Favorabilidade (Flag):",flag_regra_7)

        print("\nImagens Segmentadas que participam da Classifica√ß√£o:")
        for ind in df_consulta_img.index:
            print("IMAGEM SEGMENTADA:",df_consulta_img['idDadosClimaticos'][ind])
        
        return regra_7, df_consulta_img, flag_regra_7, df_consulta_relat_classificacao, fig_matriz_curva_classificacao, df_instancias_duplicadas, df_id_imagem_clima_favorab

    else:
        print("Resultado da Classifica√ß√£o da Imagem retornou vazio. Verifique o Cadastro!!")
        return 0,0,0

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Exibir Imagens Segmentadas participantes da Janela de Tempo
def exibirImagensParticipantes(df_consulta_img, tab):
    
    # Ordenar na sequ√™ncia as imagens: em "Verde", "Amarela" e "Marrom"
    #   -> para a exibi√ß√£o no Matplotlib
    df_consulta_img= df_consulta_img.sort_values(['idDadosClimaticos'])
    lista_img_segment=[]
    lista_consulta_sementes=[]
    lista_consulta_estatistico=[]
    lista_consulta_qualidade=[]
    # Inicializar contagem subplot Figura Imagens Segmentadas: verde, amarela e marrom
    n=3

    # Inicializa√ß√£o de Dataframes
    #   =>Armazenamento de dados de caracter√≠sticas do Processamento "Imagens Segmentadas"
    df_consulta_caract= pd.DataFrame()
    df_consulta_sementes= pd.DataFrame()
    df_consulta_estatistico= pd.DataFrame()
    df_consulta_qualidade= pd.DataFrame()

    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    # A partir do objeto de conex√£o executar as consultas na base de dados ORACLE
    with connection.cursor() as cursor:        
        try:
            # Consulta no Banco de Dados Oracle
            sql_1="SELECT IMG_SEGMENT_REFERENCIA FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][0])
            cursor.execute(sql_1)

            # Recebe imagem BLOB do Banco ORACLE
            data_ref = cursor.fetchall()
            image_ref = data_ref[0][0].read()
                        
            # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
            image_ref = np.asarray(Image.open(io.BytesIO(image_ref)))

            #------------------------------
            # Consulta no Banco de Dados Oracle
            sql_2="SELECT IMG_CANAL_VERDE FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][0])
            cursor.execute(sql_2)

            # Recebe imagem BLOB do Banco ORACLE
            data_ref_2 = cursor.fetchall()
            image_ref_2 = data_ref_2[0][0].read()
                        
            # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
            image_ref_2 = np.asarray(Image.open(io.BytesIO(image_ref_2)))
            
        # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

        # Carregar a Imagem Segmentada de Refer√™ncia no "subplot" (posi√ß√£o 1)
        fig1 = plt.figure(figsize = (25,25))
        plt.subplot(1, 5, 1)
        plt.imshow(image_ref)
        plt.title("Imagem Segmentada Refer√™ncia", fontsize=10)

        #------------------------------
        # Carregar a Imagem Canal Verde no "subplot" (posi√ß√£o 2)
        plt.subplot(1, 5, 2)
        plt.imshow(image_ref_2)
        plt.title("Imagem Canal Verde", fontsize=10)
                
        # Loop para carregar as imagens segmentadas (Classes: Verde, Amarela e Marrom)
        for ind in df_consulta_img.index:                                
                try:
                    sql_3="SELECT IMG_ROTULO_ESCOLHIDO FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                    cursor.execute(sql_3)

                    # Recebe imagem BLOB do Banco ORACLE
                    data = cursor.fetchall()
                    image = data[0][0].read()
                                
                    # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
                    image = np.asarray(Image.open(io.BytesIO(image)))

                    # Consulta no Banco de Dados Oracle
                    sql_4="SELECT CLASSE_COR FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                    cor = cursor.execute(sql_4).fetchall()
                    
                    # Carregar as Imagens Segmentadas no "subplot" (posi√ß√µes 3,4 e 5)                         
                    plt.subplot(1, 5, n)
                    plt.imshow(image)
                    plt.title("Imagem Segmentada:" + str(df_consulta_img['idDadosClimaticos'][ind]) + \
                        " - (Cor):"+ str(cor).strip("[(',)]"), fontsize=10)
                    
                    #-----------------------------------
                    # Gerar dados de Caracter√≠sticas (1) da Imagem Segmentada para exibi√ß√£o em Dados no Dataframe 
                    #   =>passar como retorno - Exibir na Aba "Processamento de Imagens"

                    # Consulta no Banco de Dados Oracle
                    sql_5="SELECT COORDENADAS_SEMENTE_CENTRAL, COORDENADAS_CALC_JANELA, TOTAL_PIXELS_JANELA, LIMIAR_1_SEGMENTACAO,\
                        LIMIAR_2_SEGMENTACAO, FAIXA_LIMIARES FROM SEGMENTACAO WHERE ID_IMG_SEGMENTADAS =" +  \
                        str(df_consulta_img['idDadosClimaticos'][ind])

                    # Carregar dados "SQL_5" e √≠ndices das Imagens Segmentadas correspondentes
                    df_consulta_caract=df_consulta_caract.append(cursor.execute(sql_5).fetchall())
                    lista_img_segment.append(str("Imagem Segment.:"+ str(df_consulta_img['idDadosClimaticos'][ind])))

                    #-----------------------------------
                    # Gerar dados de Caracter√≠sticas (2) da Imagem Segmentada para exibi√ß√£o em Dados no Dataframe 
                    #   =>passar como retorno - Exibir na Aba "Processamento de Imagens"

                    # Consulta no Banco de Dados Oracle
                    sql_6="SELECT A.DESCRICAO_COR_SEMENTE, A.COR_RGB_SEMENTE, A.DADOS_SEMENTES,\
                          B.TOTAL_SEMENTES_CALCULADAS FROM SEMENTES A, SEGMENTACAO B WHERE A.ID_SEMENTES = B.ID_SEMENTES AND ID_IMG_SEGMENTADAS =" +\
                          str(df_consulta_img['idDadosClimaticos'][ind])
                        
                    # Carregar dados "SQL_6" e √≠ndices das Imagens Segmentadas correspondentes
                    df_consulta_sementes=df_consulta_sementes.append(cursor.execute(sql_6).fetchall())
                    lista_consulta_sementes.append(str("Imagem Segment.:"+ str(df_consulta_img['idDadosClimaticos'][ind])))

                    #-----------------------------------
                    # Gerar dados de Caracter√≠sticas (3) da Imagem Segmentada para exibi√ß√£o em Dados no Dataframe 
                    #   =>passar como retorno - Exibir na Aba "Processamento de Imagens"

                    # Consulta no Banco de Dados Oracle
                    sql_7="SELECT ERRO_ESTATISTICO_CALCULADO, OPERACAO_PROJETO, DESVIO_PADRAO_PROJETO, VARIANCIA_SEGMENTACAO\
                          FROM SEGMENTACAO\
                          WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                        
                    # Carregar dados "SQL_7" e √≠ndices das Imagens Segmentadas correspondentes
                    df_consulta_estatistico=df_consulta_estatistico.append(cursor.execute(sql_7).fetchall())    
                    lista_consulta_estatistico.append(str("Imagem Segment.:"+ str(df_consulta_img['idDadosClimaticos'][ind])))

                    #-----------------------------------
                    # Gerar dados de Qualidade (1) da Imagem Segmentada para exibi√ß√£o em Dados no Dataframe 
                    #   =>passar como retorno - Exibir na Aba "Qualidade de Dados"

                    # Consulta no Banco de Dados Oracle
                    sql_8="SELECT MSE, PSNR, SSIM, OUTLIERS_BOXPLOT_SEMENTES, OUTLIERS_BOXPLOT_SEMENTES_CALCULO FROM IMAGENS_SEGMENTADAS\
                          WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                        
                    # Carregar dados "SQL_8" e √≠ndices das Imagens Segmentadas correspondentes
                    df_consulta_qualidade=df_consulta_qualidade.append(cursor.execute(sql_8).fetchall())     
                    lista_consulta_qualidade.append(str("Imagem Segment.:"+ str(df_consulta_img['idDadosClimaticos'][ind])))

                    # Incrementar posi√ß√£o de carga de Imagens Segmentadas para montar o "subplot"
                    n+=1
                                        
                # Exce√ß√£o
                except cx_Oracle.Error as e:
                    error, = e.args
                    print(error.message)                    
                    if (error.offset):
                        print('^'.rjust(error.offset+1, ' '))

        # Carga de Imagens Segmentadas para montar o "subplot" Figura Boxplot
        n=1

        # Figura Boxplot - Configura√ß√µes do Plot
        fig_boxplot= plt.figure(figsize = (25,25))
    
        try:
            # Loop para carregar os gr√°ficos BoxPlot (Classes: Verde, Amarela e Marrom)
            for ind in df_consulta_img.index:
                # Consulta no Banco de Dados Oracle
                sql_10="SELECT CLASSE_COR FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                cor = cursor.execute(sql_10).fetchall()

                # Consulta no Banco de Dados Oracle
                sql_11="SELECT BOXPLOT_SEMENTES FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                cursor.execute(sql_11)

                # Recebe imagem BLOB do Banco ORACLE
                data = cursor.fetchall()
                image1 = data[0][0].read()
                            
                # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
                image1 = np.asarray(Image.open(io.BytesIO(image1)))
                
                # Carregar as Imagens Segmentadas no "subplot" (posi√ß√µes din√¢micas)                         
                plt.subplot(3, 2, n)
                plt.axis('off')
                plt.imshow(image1)
                plt.title("Sementes Sem Processamento - Cor: "+ str(cor).strip("[(',)]") + \
                            ' (Img.Segmentada:'+ str(df_consulta_img['idDadosClimaticos'][ind]) + ')', fontsize=13)
                
                # Incrementar posi√ß√£o de carga de Imagens Segmentadas para montar o "subplot" Figura Boxplot
                n+=1

                # Consulta no Banco de Dados Oracle
                sql_12="SELECT BOXPLOT_SEMENTES_CALCULO FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                cursor.execute(sql_12)

                # Recebe imagem BLOB do Banco ORACLE
                data = cursor.fetchall()
                image2 = data[0][0].read()
                            
                # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
                image2 = np.asarray(Image.open(io.BytesIO(image2)))

                # Carregar as Imagens Segmentadas no "subplot" (posi√ß√µes din√¢micas)                         
                plt.subplot(3, 2, n)
                plt.axis('off')
                plt.imshow(image2)
                plt.title("Sementes Com Processamento - Cor: "+ str(cor).strip("[(',)]") + \
                            ' (Img.Segmentada:'+ str(df_consulta_img['idDadosClimaticos'][ind]) + ')', fontsize=13)

                # Incrementar posi√ß√£o de carga de Imagens Segmentadas para montar o "subplot"
                n+=1
                                    
        # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))
                
        #**********************************************
        # Exibi√ß√£o das Imagens Segmentadas em Dashboard
        #**********************************************
        with tab: # Aba "Dashboard"
            dash_col_1_2.latex(r'''
            \textcolor{blue}{\textbf{Imagens Segmentadas:}}
            ''')                    
            dash_col_1_2.pyplot(fig1)

    connection.close()

    return df_consulta_caract, fig1, lista_img_segment, df_consulta_sementes, lista_consulta_sementes,\
        df_consulta_estatistico, lista_consulta_estatistico, df_consulta_qualidade, lista_consulta_qualidade, fig_boxplot
    
#------------------------------------------------------------------------------------------------

#Fun√ß√£o para Exibir Histogramas
def exibirHistogramas(df_consulta_img):
    # Inicializar contador para subplot
    n=1
    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)
    
    # Configura√ß√µes do Plot
    fig_histograma = plt.figure(figsize = (25,25))
    
    with connection.cursor() as cursor: 
        for ind in df_consulta_img.index:
            try:

                # Consulta no Banco de Dados Oracle
                sql_1="SELECT CLASSE_COR FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                cor = cursor.execute(sql_1).fetchall()

                #-----------------------------------
                # Gerar dados de Qualidade (2) Histograma de Compara√ß√£o das Imagens 
                #   =>passar como retorno - Exibir na Aba "Qualidade de Dados"

                # Consulta no Banco de Dados Oracle
                sql_2="SELECT HISTOGRAMA FROM IMAGENS_SEGMENTADAS WHERE ID_IMG_SEGMENTADAS =" + str(df_consulta_img['idDadosClimaticos'][ind])
                cursor.execute(sql_2)

                # Recebe imagem BLOB do Banco ORACLE
                data = cursor.fetchall()
                image_histograma = data[0][0].read()
                            
                # Converte BLOB em bytes e array para plotar a imagem (Matplotlib)
                image_histograma = np.asarray(Image.open(io.BytesIO(image_histograma)))

                # Carregar as Imagens Segmentadas no "subplot"                       
                plt.subplot(1, 3, n)
                plt.imshow(image_histograma)
                plt.axis('off')
                plt.title("Imagem Segmentada:" + str(df_consulta_img['idDadosClimaticos'][ind]) + \
                    " - (Cor):"+ str(cor).strip("[(',)]"), fontsize=10)
                
                # Incremento do contador subplot
                n+=1

            # Exce√ß√£o
            except cx_Oracle.Error as e:
                error, = e.args
                print(error.message) 
                if (error.offset):
                    print('^'.rjust(error.offset+1, ' '))
             
    connection.close()
    return fig_histograma

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Contagem de Ocorr√™ncias por Regras
def contagemOcorrencias(df_consulta_bd,regra_1,regra_2,regra_3,regra_4,regra_5,regra_6,regra_7, \
      medianaRegra_01,medianaRegra_02,regra_4_valor,regra_5_valor,medianaRegra_06, casas_decimais,\
      flag_df,medianaRegra_03_1, medianaRegra_03_2):

   totalJanela=len(df_consulta_bd.index)
   print("Total de Dados (leituras di√°rias) da Janela-> "+ str(totalJanela))
   ocorrenciasRegra_1= len(regra_1.index)
   print("Ocorr√™ncias Regra 1-> "+ str(ocorrenciasRegra_1))
   ocorrenciasRegra_2= len(regra_2.index)
   print("Ocorr√™ncias Regra 2-> "+ str(ocorrenciasRegra_2))
   
   # Se Regra 3 retornar "0" ler o valor normalmente
   #  -> Se Diferente de "0" ler a quantidade de linhas do Dataframe Pandas
   if flag_df==0:
      ocorrenciasRegra_3=regra_3
   else:
      ocorrenciasRegra_3= len(regra_3.index)
   
   print("Ocorr√™ncias Regra 3-> "+ str(ocorrenciasRegra_3))
   ocorrenciasRegra_4= regra_4
   print("Ocorr√™ncias Regra 4-> "+ str(ocorrenciasRegra_4))
   ocorrenciasRegra_5= regra_5
   print("Ocorr√™ncias Regra 5-> "+ str(ocorrenciasRegra_5))
   ocorrenciasRegra_6= len(regra_6.index)
   print("Ocorr√™ncias Regra 6-> "+ str(ocorrenciasRegra_6))
   ocorrenciasRegra_7= regra_7
   print("Ocorr√™ncias Regra 7-> "+ str(ocorrenciasRegra_7))

   # Vetor de Valores das Regras (Valores de Refer√™ncia)      
   dados_regras=np.array([medianaRegra_01,medianaRegra_02,medianaRegra_03_1, medianaRegra_03_2,regra_4_valor,regra_5_valor,medianaRegra_06, regra_7])

   return dados_regras, totalJanela, ocorrenciasRegra_1, ocorrenciasRegra_2, ocorrenciasRegra_3, ocorrenciasRegra_4,\
      ocorrenciasRegra_5, ocorrenciasRegra_6, ocorrenciasRegra_7

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Plotar gr√°fico de ocorr√™ncias
def plotarOcorrencias(ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,ocorrenciasRegra_4,ocorrenciasRegra_5,\
   ocorrenciasRegra_6,ocorrenciasRegra_7, tab):
   x=[1,2,3,4,5,6,7]
   y=[ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,ocorrenciasRegra_4,ocorrenciasRegra_5,ocorrenciasRegra_6,
      ocorrenciasRegra_7]
   labels = ['Per.Molham.Foliar','Per.Min.Molham.Foliar','Faixa Temperatura','Temperatura M√°xima','Temperatura M√≠nima',\
    'Ponto de Orvalho','Dados de Imagem']
   fig = plt.figure(figsize = (5,5))
   plt.plot(x,y,'k--')
   plt.plot(x,y,'go')
   plt.grid(True)
   plt.title("Ocorr√™ncias x Vari√°veis Base de Favorabilidade")
   #plt.xlabel("Vari√°veis da Base de Regras de Favorabilidade da FAS")
   plt.ylabel("Ocorr√™ncias")
   plt.xticks(x, labels, rotation='vertical')
   plt.show()
  
   #***********************************************
   # Exibir o gr√°fico de Ocorr√™ncias no Dashboard
   #***********************************************
   with tab:
    dash_col_2_1.latex(r'''
        \textcolor{blue}{\textbf{Gr√°fico de Vari√°veis - F.A.S.:}}
    ''')
    dash_col_2_1.pyplot(fig)

   return x,y

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Calcular os erros: Abordagens: Figura M√©rito e L√≥gica Fuzzy
def calcularErro(resultado):   
   vetor_resultado_erro=[]
   descricao=["Calculado:","+5% Erro:","-5% Erro:"]

   # Valor Calculado
   vetor_resultado_erro.append(round(resultado, casas_decimais))
   # Considerar +5% de erro
   vetor_resultado_erro.append(round(resultado + ((5*resultado)/100),casas_decimais))
   # Considerar -5% de erro
   vetor_resultado_erro.append(round(resultado - ((5*resultado)/100),casas_decimais))
   
   # Associa o resultado ao erro
   lista_resultado=list(zip(descricao,vetor_resultado_erro))

   return lista_resultado

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Carregar a Tabela Verdade (Abordagem Markov)
def carregarTabelaVerdade():
    # Leitura dos dados da Tabela Verdade - Arquivo .CSV
    # Carga dos dados em um Dataframe Pandas
    path="Tabelas_Verdade_Probabilidades_7_VAR.csv"
    df_tab_verdade=pd.DataFrame()
    df_tab_verdade=pd.read_csv(path, sep=';')
    
    return df_tab_verdade

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para encontrar a Combina√ß√£o da Tabela - Descobrir o Estado correspondente
# Dado o vetor de Ocorr√™ncias de Favorabilidade da FAS
def encontraCombinacao(ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,ocorrenciasRegra_4,ocorrenciasRegra_5,ocorrenciasRegra_6,
                    ocorrenciasRegra_7,df_tab_verdade,tab):
    vetor_compara=[]
    vetor_ocorrencias=[ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,ocorrenciasRegra_4,ocorrenciasRegra_5,ocorrenciasRegra_6,
                    ocorrenciasRegra_7]
    text=""
    text+="\nEntradas para simula√ß√£o Modelo Cadeias Ocultas de Markov"
    text+="\nVetor de Ocorr√™ncias:" + str(vetor_ocorrencias)

    #**********************************************
    # Exibi√ß√£o do Vetor de Ocorr√™ncias - Dashboard
    #**********************************************
    with tab:
        dash_col_2_3.latex(r'''
        \textcolor{blue}{\textbf{Resultados do Processamento:}}
        ''')              
        dash_col_2_3.write("\nVetor de Ocorr√™ncias:" + str(vetor_ocorrencias))

    for ocorrencia in vetor_ocorrencias:
        if ocorrencia>0:
            vetor_compara.append(1)
        else:
            vetor_compara.append(0)
    text+="\nVetor de Compara√ß√£o:" + str(vetor_compara)

    #*********************************************
    # Exibi√ß√£o do Vetor de Compara√ß√£o - Dashboard
    #*********************************************
    #with tab:
        #dash_col_2_3.write("\nVetor de Compara√ß√£o:" + str(vetor_compara))

    # Recupera na Tabela Verdade os dados iguais ao Vetor de Compara√ß√£o
    vetor_resultado=df_tab_verdade[(df_tab_verdade['V1']==vetor_compara[0]) & (df_tab_verdade['V2']==vetor_compara[1]) &              \
        (df_tab_verdade['V3']==vetor_compara[2]) & (df_tab_verdade['V4']==vetor_compara[3]) &                                         \
        (df_tab_verdade['V5']==vetor_compara[4]) & (df_tab_verdade['V6']==vetor_compara[5]) & (df_tab_verdade['V7']==vetor_compara[6])]
    print(vetor_resultado)

    #*****************************************************
    # Exibir o Vetor Resultado em duas linhas - Dashboard
    #*****************************************************
    df_vetor_resultado_linhas=pd.DataFrame([
                                            [int(vetor_resultado.iloc[0,0]),vetor_resultado.iloc[0,1],vetor_resultado.iloc[0,2],vetor_resultado.iloc[0,3], \
                                                vetor_resultado.iloc[0,4],vetor_resultado.iloc[0,5],vetor_resultado.iloc[0,6]],                            \
                                            [vetor_resultado.iloc[0,8],vetor_resultado.iloc[0,9],vetor_resultado.iloc[0,10],vetor_resultado.iloc[0,11],    \
                                                vetor_resultado.iloc[0,12],vetor_resultado.iloc[0,13],vetor_resultado.iloc[0,14]]],
                                                columns=["V1", "V2", "V3", "V4", "V5", "V6", "V7"], index=['Combina√ß√£o:','Porcentagem:'])
            
    #*********************************************
    # Exibi√ß√£o do Vetor de Resultados - Dashboard
    #*********************************************
    with tab:
        # Exibir Texto do Vetor de Resultados - Dashboard
        dash_col_2_3.text("Vetor de Resultado - Cadeias Ocultas Markov:")
        
        # Formatar os campos em duas casas decimais
        dash_col_2_3.dataframe(df_vetor_resultado_linhas.style.format({'V1':'{:.2f}','V2':'{:.2f}','V3':'{:.2f}','V4':'{:.2f}','V5':'{:.2f}',\
                                                             'V6':'{:.2f}','V7':'{:.2f}'}))      
                                  
    return vetor_resultado, vetor_compara, vetor_ocorrencias, text

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para capturar o √≠ndice do resultado do "vetor_resultado"
def capturarIndiceFavorab(vetor_resultado, text, df_consulta_bd):
        #  Origem da Tabela Verdade de Favorabilidade (Abordagem Markov)
    ID_TAB_VERD_FAVORAB=0
    ID_TAB_VERD_FAVORAB=vetor_resultado.index.values
    ID_TAB_VERD_FAVORAB[0]+=1
    text+="\n\nResultados Abordagem Cadeias Ocultas de Markov"
    text+="\n-------------------------------------------------"
    text+="\n√çndice Resultado Tabela Verdade:\n" + str(ID_TAB_VERD_FAVORAB[0])

    # Cria o Dataframe e organizar os dados para a tabela "IMAGEM_CLIMA_FAVORAB"
    df_img_cli_favorab = pd.DataFrame()
    df_img_cli_favorab.insert(0,"ID_DADOS_CLIMATICOS", df_consulta_bd["idDadosClimaticos"])
    df_img_cli_favorab.insert(1,"ID_TAB_VERD_FAVORAB", ID_TAB_VERD_FAVORAB[0])
    df_img_cli_favorab.insert(2,"ID_BANCO_IMAGENS", 1)
    print(df_img_cli_favorab)

    return df_img_cli_favorab,text

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Normaliza√ß√£o dos valores de probabilidades iniciais
def normalizaProbabilidadesIniciais():
    # Probabilidade baixa (0 - 33,3)
    # Probabilidade m√©dia (33,4 - 66,6)
    # Probabilidade alta (66,7 - 100)
    scala_Regras=MinMaxScaler(feature_range=(0,1))
    pbi=scala_Regras.fit_transform(np.array([0, 34.4, 66.7]).reshape(-1, 1))
    print(pbi)

    return pbi

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para identificar a probabilidade do Estado Atual
def probabilidadeEstadoAtual(text,vetor_resultado):
    # Inserir informa√ß√µes do Modelo 
    # Matriz de Probabilidade Inicial
    ##probab_inicial= [[0.1], [0.2], [0.7]]
    probab_inicial= [[0.33], [0.33], [0.33]]

    # Matriz de Transi√ß√£o de Estados
    matriz_transicao= [[0.4, 0.3, 1],
                      [0.6, 0.7, 0],
                      [0  , 0  , 0]]

    # Tratamento das Probabilidades - Combina√ß√µes das Vari√°veis
    probab_estado=vetor_resultado[['P_V1','P_V2','P_V3','P_V4','P_V5','P_V6','P_V7']]
    text+=str(probab_estado)

    # Soma dos valores das Probabilidades (Soma = "1")
    probab_previsao=np.sum(probab_estado)

    return probab_estado, probab_previsao, matriz_transicao, probab_inicial, text

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para identificar o Estado do Atual da Favorabilidade FAS
def identificaEstadoAtual(vetor_resultado, probab_previsao, text, tab):
    # Atribui o valor da Matriz de Previs√£o
    # -> uso ap√≥s o primeiro c√°lculo de previs√£o
    # -> monta a matriz de previs√£o com a soma dos valores
    #    das probabilidades origidas da combina√ß√£o escolhida
    # Imprimir o resultado

    if np.array(vetor_resultado['S'])==1:
        resultado_markov= "Favorabilidade Baixa"
        text+="\nAbordagem Cadeias Ocultas de Markov - Estado Atual:" + str(resultado_markov) + "\n\n"

        #************************************
        # Exibi√ß√£o de Resultado no Dashboard
        #************************************
        with tab:
            st.subheader("Recomenda√ß√µes para Tomada de Decis√£o para Progn√≥stico")
            #st.caption("Legenda de Resultados: Favorabilidade Baixa - Cor Verde; Favorabilidade M√©dia - Cor Azul; Favorabilidade Alta - Cor Vermelha")
            components.html(
                """
                <html>
                    <table style="font-size:20px" border="0">
                        <tr align="center" bgcolor="green">
                            <td>Favorabilidade Baixa</td>
                        </tr>                        
                    </table> 
                </html>
                """
                ,height=40)

        previsao_prox=[[probab_previsao.sum()], [0], [0]]
    elif np.array(vetor_resultado['S'])==2:
        resultado_markov= "Favorabilidade M√©dia"
        text+="\nAbordagem Cadeias Ocultas de Markov - Estado Atual:" + str(resultado_markov) + "\n\n"

        #************************************
        # Exibi√ß√£o de Resultado no Dashboard
        #************************************
        with tab:
            st.subheader("Recomenda√ß√µes para Tomada de Decis√£o para Progn√≥stico:")
            #st.caption("Legenda de Resultados: Favorabilidade M√©dia - Cor Verde; Favorabilidade M√©dia - Cor Azul; Favorabilidade Alta - Cor Vermelha")
            components.html(
                  """
                <html>
                    <table style="font-size:20px" border="0">
                        <tr align="center" bgcolor="blue">
                            <td><span style="color:#FFFFFF">Favorabilidade M√©dia</span></td>
                        </tr>                        
                    </table>
                </html>
                """
                ,height=40)

        previsao_prox=[ [0], [probab_previsao.sum()], [0]]
    elif np.array(vetor_resultado['S'])==3:
        resultado_markov= "Favorabilidade Alta"
        text+="\nAbordagem Cadeias Ocultas de Markov - Estado Atual:" + str(resultado_markov) + "\n\n"

        #************************************
        # Exibi√ß√£o de Resultado no Dashboard
        #************************************
        with tab:
            st.subheader("Recomenda√ß√µes para Tomada de Decis√£o para Progn√≥stico:")
            #st.caption("Legenda de Resultados: Favorabilidade Alta - Cor Verde; Favorabilidade M√©dia - Cor Azul; Favorabilidade Alta - Cor Vermelha")
            components.html(
                """
                <html>
                    <table style="font-size:20px" border="0">
                        <tr align="center" bgcolor="red">
                            <td><span style="color:#FFFFFF">Favorabilidade Alta</span></td>
                        </tr>
                    </table>
                </html>
                """
                ,height=40)

        previsao_prox=[[0], [0], [probab_previsao.sum()]]

    return previsao_prox, resultado_markov, text

#------------------------------------------------------------------------------------------------

# Abordagem Modelo de Cadeias Ocultas de Markov
# Fun√ß√£o para Exibi√ß√£o do Modelo Gr√°fico
def exibir_img_modelo(resultado_markov, tab):
    if resultado_markov == "Favorabilidade Baixa":
        img =cv2.cvtColor(cv2.imread('Automato_3_baixa.png'), cv2.COLOR_BGR2RGB)
        plt.figure(figsize=[10, 10])
        plt.imshow(img)
    if resultado_markov == "Favorabilidade M√©dia":
        img =cv2.cvtColor(cv2.imread('Automato_3_media.png'), cv2.COLOR_BGR2RGB)
        plt.figure(figsize=[10, 10])
        plt.imshow(img)
    if resultado_markov == "Favorabilidade Alta":
        img =cv2.cvtColor(cv2.imread('Automato_3_alta.png'), cv2.COLOR_BGR2RGB)
        plt.figure(figsize=[10, 10])
        plt.imshow(img)

    #****************************************
    # Exibir a figura do Modelo no Dashboard
    #****************************************
    with tab:
        dash_col_2_2.latex(r'''
        \textcolor{blue}{\textbf{Resultado Cadeias Ocultas Markov:}}
        ''')
    dash_col_2_2.image(img)

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para calcular Pr√≥xima Previs√£o das Probabilidades 
# Uso da Probabilidade Inicial
def calcularPrevisoes(matriz_transicao, probab_inicial,previsao_prox):
    previsao_1=np.matmul(matriz_transicao, probab_inicial)
    print("Previs√£o 1:",previsao_1)

    # Previs√£o das Probabilidades - Uso da Probabilidade
    # -> Combina√ß√£o da Tabela Verdade selecionada
    previsao_2=np.matmul(matriz_transicao, previsao_prox)
    print("Previs√£o 2:",previsao_2)
    finalizado=True

    return previsao_1, previsao_2, finalizado

#------------------------------------------------------------------------------------------------

# Script SQL para inserir dados na tabela "FAVORABILIDADES_FAS" no Banco Oracle (Cloud)
def gerarScriptSQLFavorabilidades_FAS(ID_BANCO_IMAGENS,RESULTADO_FAVORABILIDADE,VETOR_FAVORABILIDADE,JANELA_TEMPO_INICIAL,JANELA_TEMPO_FINAL,ABORDAGEM_FUSAO_DADOS):
    # Inserir dados de inser√ß√£o da tabela "FAVORABILIDADE_FAS"

    # Consulta no Banco de Dados Oracle
    sql="insert into FAVORABILIDADES_FAS (ID_FAVORABILIDADE,ID_BANCO_IMAGENS,RESULTADO_FAVORABILIDADE,VETOR_FAVORABILIDADE,JANELA_TEMPO_INICIAL,JANELA_TEMPO_FINAL,ABORDAGEM_FUSAO_DADOS)"
    
    # Inserir dados de valores da tupla
    sql_values="values (ID_FAVORABILIDADE_FAS_SEQ.nextval," + str(ID_BANCO_IMAGENS) + ",'" + str(RESULTADO_FAVORABILIDADE) + "','" + str(VETOR_FAVORABILIDADE) + "',TO_DATE(" + str(JANELA_TEMPO_INICIAL) +\
    "),TO_DATE(" + str(JANELA_TEMPO_FINAL) + "),'" + str(ABORDAGEM_FUSAO_DADOS) + "');\n"
    #incrementar uma linha do script
    text=''
    text+=sql + sql_values
    
    return text

#------------------------------------------------------------------------------------------------

# Script SQL para inserir dados na tabela "IMAGEM_CLIMA_FAVORAB" no Banco Oracle (Cloud)
def gerarScriptSQLImagemClima_Favorab(dataframe_dados):
    text=''
    for idx, dados in dataframe_dados.iterrows():
        # Inserir dados de inser√ß√£o da tabela "FAVORABILIDADE_FAS"

        # Consulta no Banco de Dados Oracle
        sql="insert into IMAGEM_CLIMA_FAVORAB (ID_IMAGEM_CLIMA_FAVORAB,ID_BANCO_IMAGENS,ID_TAB_VERD_FAVORAB,ID_DADOS_CLIMATICOS)"

        # Inserir dados de valores da tupla
        sql_values="values (ID_IMAGEM_CLIMA_FAVORAB_SEQ.nextval," + str(dados.ID_BANCO_IMAGENS) + ",'" + str(dados.ID_TAB_VERD_FAVORAB) + "','" + str(dados.ID_DADOS_CLIMATICOS) + "');\n"
        #Incrementar uma linha do script
        text+=sql + sql_values
       
    return text

#------------------------------------------------------------------------------------------------

# Salvar script SQL em disco
def salvarScriptSQL(text,path_2,nome):
    data_hora = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    with open(path_2 + nome + str(data_hora) + '.sql', 'w') as f:
        f.write(text)

#------------------------------------------------------------------------------------------------

# Fun√ß√£o para Exibir as Recomenda√ß√µes na Aba da Aplica√ß√£o WEB
def ExibirRecomendacoes(tab, resultado_markov, df_id_imagem_clima_favorab):
    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    print("ID_imagem_clima_favorab:",int(df_id_imagem_clima_favorab['ID_IMAGEM_CLIMA_FAVORAB']))

    id_imagem_clima_favorab = int(df_id_imagem_clima_favorab['ID_IMAGEM_CLIMA_FAVORAB'])

    # A partir do objeto de conex√£o executar a consulta na base de dados
    with connection.cursor() as cursor:
        try:
            # Consulta no Banco de Dados Oracle
            sql_1="SELECT ID_FUNGICIDA,TRATAMENTO,DOSAGEM_1,DOSAGEM_2,SEVERIDADE,PORCENTAGEM_CONTROLE,PRODUTIVIDADE FROM FUNGICIDAS"
                                                       
            # Carregar o resultado da consulta no DataFrame
            df_recomendacoes=pd.DataFrame(cursor.execute(sql_1), columns=['ID','TRATAMENTO','DOSAGEM 1',\
                'DOSAGEM 2','SEVERIDADE','% CONTROLE','PRODUTIVIDADE'])
            
            # Definir o "ID" como √≠ndice do Dataframe "df_recomendacoes"
            df_recomendacoes.set_index('ID', inplace=True)                      

            # Consulta do Texto correspondente √† recomenda√ß√£o de acordo com o resultado do Modelo de Markov
            # Se resultado de Favorabilidade for "Baixa"
            if resultado_markov == "Favorabilidade Baixa":
                sql_2="SELECT RECOMENDACAO_FAVORAB_BAIXA FROM RECOMENDACOES"
                
            # Se resultado de Favorabilidade for "M√©dia"
            if resultado_markov == "Favorabilidade M√©dia":
                sql_2="SELECT RECOMENDACAO_FAVORAB_MEDIA FROM RECOMENDACOES"
                
            # Se resultado de Favorabilidade for "Alta"
            if resultado_markov == "Favorabilidade Alta":
                sql_2="SELECT RECOMENDACAO_FAVORAB_ALTA FROM RECOMENDACOES"                

            # Executar comando SQL selecionado
            cursor.execute(sql_2)

            # Recebe Dados tipo CLOB do Banco ORACLE
            for row in cursor:
                df_recomendacoes_texto=pd.DataFrame([[row[0].read()]], columns=['RECOMENDA√á√ÉO'])
            
            # Consulta no Banco de Dados ORACLE para trazer o tipo de cultura associada √† imagem original que deu origem √† segmenta√ß√£o
            #    => que foi processada via imagens segmentadas de resultado do processamento
            sql_3="SELECT ID_DADOS_PLANTA_SOJA, VARIEDADE_CULTURA, DISTANCIA_LINHA_CULTURA, ALTURA_PLANTA_CULTURA, DISTANCIA_PLANTA_CULTURA FROM \
                              DADOS_PLANTA_SOJA WHERE ID_DADOS_PLANTA_SOJA =" + str(id_imagem_clima_favorab)

            # Carregar o resultado da consulta no DataFrame
            df_dados_planta_soja=pd.DataFrame(cursor.execute(sql_3), columns=['ID','VARIEDADE DA CULTURA', 'DIST√ÇNCIA ENTRE LINHAS (Metros)',\
                                                                               'ALTURA DA PLANTA (Metros)', 'DIST√ÇNCIA ENTRE PLANTAS (Metros)'])
            
            # Definir o "ID" como √≠ndice do Dataframe "df_dados_planta_soja"
            df_dados_planta_soja.set_index('ID', inplace=True) 
    
    # Exce√ß√£o
        except cx_Oracle.Error as e:
            error, = e.args
            print(error.message)
            print(sql_1)
            if (error.offset):
                print('^'.rjust(error.offset+1, ' '))

    # Fechar a Conex√£o
    connection.close()

    print(df_recomendacoes_texto)

    #****************************************************
    # Exibir os Dataframes (Tabela e Texto) no Dashboard
    #****************************************************
    with tab:
        # Adiconar a Tabela de Fungicidas
            # Formata√ß√£o para precis√£o das colunas "Float"
        tab.subheader("Op√ß√µes e Sele√ß√£o de Fungicidas:")

        tab.markdown("""
            <p>***Sujeito a atualiza√ß√£o, conforme <a href="https://www.gov.br/agricultura/pt-br/assuntos/insumos-agropecuarios/insumos-agricolas/agrotoxicos/agrofit" target="_blank">Agrofit</a></p>
        """, unsafe_allow_html=True)

        tab.dataframe(df_recomendacoes.style.format({'SEVERIDADE':'{:.2f}', '% CONTROLE':'{:.2f}'}))

        tab.dataframe(df_dados_planta_soja.style.format({'DIST√ÇNCIA ENTRE LINHAS (Metros)':'{:.0f}','ALTURA DA PLANTA (Metros)':'{:.2f}',\
                                                          'DIST√ÇNCIA ENTRE PLANTAS (Metros)':'{:.2f}'}))
        
        # Adicionar o Texto de Recomenda√ß√£o
        tab.subheader("Boas Pr√°ticas de Manejo da Soja (Vis√£o Agron√¥mica):")
        tab.write(df_recomendacoes_texto.iloc[0]['RECOMENDA√á√ÉO'])

    return df_recomendacoes, df_recomendacoes_texto

#------------------------------------------------------------------------------------------------

def exibirDadosProcessamentoImagens(df_consulta_caract, tab, img_segmentadas, lista_img_segment, df_consulta_sementes,\
         lista_consulta_sementes, df_consulta_estatistico, lista_consulta_estatistico):

    #*********************************************************************
    # Exibir o Dataframes e Demais dados na Aba "Processamento de Imagens"
    #*********************************************************************
    with tab:
        # Configura√ß√µes de Tabela "Configura√ß√µes Gerais - Imagens Segmentadas":

        # Inserir nova coluna √† pesquisa do banco de dados com os dados de √≠ndice das Imagens Segmentadas
        df_consulta_caract.insert(6, "nova_coluna", lista_img_segment, True)
        # Nomear as colunas do Dataframe
        df_consulta_caract.columns=['COORD. SEMENTE','COORD. VIZINHAN√áA SEMENTE', 'TOTAL PIXELS JANELA','LIMIAR 1',\
                            'LIMIAR 2','FAIXA LIMIARES','IMG_SEGMENTADA']
        # Configurar os √≠ndices do Dataframe com os valores de √≠ndices das imagens segmentadas
        df_consulta_caract= df_consulta_caract.set_index('IMG_SEGMENTADA')

        #-------------------------

        # Inserir nova coluna √† pesquisa do banco de dados com os dados de √≠ndice das Imagens Segmentadas
        df_consulta_sementes.insert(4, "nova_coluna", lista_consulta_sementes, True)
        # Nomear as colunas do Dataframe
        df_consulta_sementes.columns=['DESCRI√á√ÉO COR SEMENTE','COR RGB SEMENTE','DADOS SEMENTES',\
                             'TOTAL SEMENTES CALCULADAS','IMG_SEGMENTADA']
        # Configurar os √≠ndices do Dataframe com os valores de √≠ndices das imagens segmentadas
        df_consulta_sementes= df_consulta_sementes.set_index('IMG_SEGMENTADA')

         #-------------------------

        # Inserir nova coluna √† pesquisa do banco de dados com os dados de √≠ndice das Imagens Segmentadas
        df_consulta_estatistico.insert(4, "nova_coluna", lista_consulta_estatistico, True)
        # Nomear as colunas do Dataframe
        df_consulta_estatistico.columns=['ERRO ESTAT√çSTICO CALCULADO','OPERA√á√ÉO','DESVIO PADR√ÉO',\
                                'VARI√ÇNCIA SEGMENTACAO','IMG_SEGMENTADA']
        # Configurar os √≠ndices do Dataframe com os valores de √≠ndices das imagens segmentadas
        df_consulta_estatistico= df_consulta_estatistico.set_index('IMG_SEGMENTADA')

        #-------------------------

        # Adicionar a Tabela dos Dados das Imagens Processadas
            # Formata√ß√£o de T√≠tulos; e precis√£o das colunas "Float"
            # Formata√ß√£o da precis√£o des colunas "Float"
        
        tab.latex(r'''
        \textcolor{black}{\textbf{Imagens Segmentadas:}}
        ''')                    
        tab.pyplot(img_segmentadas)

        tab.latex(r'''
        \textcolor{black}{\textbf{Etapa 2: Coordenadas e Limiares - Pixel Semente:}} \\
        \textcolor{black}{\textit{(C√°lculo da Vizinhan√ßa do Pixel Semente)}}
        ''') 
        tab.dataframe(df_consulta_caract)

        tab.latex(r'''
        \textcolor{black}{\textbf{Etapa 2: Sementes - Imagens Segmentadas:}}
        ''') 
        tab.dataframe(df_consulta_sementes)

        tab.latex(r'''
        \textcolor{black}{\textbf{Etapa 2: Estat√≠sticas C√°lculos - Imagens Segmentadas:}}
        ''')
        # Formata√ß√£o de Precis√£o - C√°lculos Estat√≠sticos
        tab.dataframe(df_consulta_estatistico.style.format({'ERRO ESTAT√çSTICO CALCULADO':'{:.2f}',\
             'DESVIO PADR√ÉO':'{:.2f}','VARI√ÇNCIA SEGMENTACAO':'{:.2f}'}))

#------------------------------------------------------------------------------------------------

def exibir_dados_qualidade_dados(tab, df_consulta_qualidade, lista_consulta_qualidade, fig_histograma, fig_boxplot, df_consulta_relat_classificacao,\
                                  fig_matriz_curva_classificacao, df_instancias_duplicadas, arquivo_4, fig_qualidade_fusao):

    # Defini√ß√£o de Colunas (fora dos Conteiners)
    dash_6_col_0_1, dash_6_col_0_2, dash_6_col_0_3= tab.columns([0.1,2.0,1.5], gap="medium")
    
    #************************************************************************
    # Exibir tabela com os Indicadores de Qualidade para as Fases do Processo
    #************************************************************************

    # Dados dos Indicadores de Qualidade Segmenta√ß√£o
    dados_ind_segmentacao=[['Histograma, SSIM, PSNR, MSE','% Outliers']]
    
    # Inicializar Dataframe para exibi√ß√£o de Indicadores de Qualidade Etapa Segmenta√ß√£o
    df_indicadores=pd.DataFrame(dados_ind_segmentacao, columns=['Filtro de Mediana','Outliers'], index=["Indicadores:"])

    # Exibi√ß√£o de T√≠tulo e Indicadores da Etapa de Segmenta√ß√£o
    dash_6_col_0_2.latex(r'''
            \textcolor{black}{\textbf{Indicadores de Qualidade - Fase Segmenta√ß√£o:}}\\
            \textcolor{blue}{\textbf{\footnotesize{Dimens√µes: Validade, Confiabilidade, Janela Temporal de Coleta}}}            
            ''')
    
    dash_6_col_0_2.dataframe(df_indicadores)

    #---------------------------------------

    # Dados dos Indicadores de Qualidade Fase de Extra√ß√£o Caracter√≠sticas/Reconhecimento de Padr√µes
    dados_ind_caract_padroes=[['% Valores Ausentes','% Redu√ß√£o de Dimensionalidade']]
    
    # Inicializar Dataframe para exibi√ß√£o de Indicadores de Qualidade Fase de Extra√ß√£o de Caracter√≠sticas/Reconhecimento de Padr√µes
    df_dados_ind_caract_padroes=pd.DataFrame(dados_ind_caract_padroes, columns=['Imputa√ß√£o','Alta Dimensionalidade'], index=["Indicadores:"])

    # Exibi√ß√£o de T√≠tulo e Indicadores da Fase de Extra√ß√£o de Caracter√≠sticas/Reconhecimento de Padr√µes
    dash_6_col_0_2.latex(r'''
            \textcolor{black}{\textbf{Indicadores de Qualidade - Fase Extra√ß√£o de Caracter√≠sticas e Reconhecimento de Padr√µes:}}\\
            \textcolor{blue}{\textbf{\footnotesize{Dimens√µes: Validade, Exatid√£o}}}
            ''')
    dash_6_col_0_2.dataframe(df_dados_ind_caract_padroes)

     #---------------------------------------
    
    # Dados dos Indicadores de Qualidade Fase Aprendizado de M√°quinas (Classifica√ß√£o)
    dados_ind_aprend_maquinas=[['% Inst√¢ncias Duplicadas Eliminadas','% Precis√£o, Acur√°cia, F1 Score,Revoca√ß√£o','VP, VN, FP, FN, √Årea sob a Curva']]
    
    # Inicializar Dataframe para exibi√ß√£o de Indicadores Fase Fase Aprendizado de M√°quinas (Classifica√ß√£o)
    df_dados_dados_ind_aprend_maquinas=pd.DataFrame(dados_ind_aprend_maquinas, columns=['Inst√¢ncias Duplicadas','Relat√≥rio Classificador',\
                                                                                        'Matriz confus√£o e Curva ROC'], index=["Indicadores:"])

    # Exibi√ß√£o de T√≠tulo e Indicadores Fase Aprendizado de M√°quinas (Classifica√ß√£o)
    dash_6_col_0_2.latex(r'''
            \textcolor{black}{\textbf{Indicadores de Qualidade - Fase Aprendizado de M√°quinas:}}\\
            \textcolor{blue}{\textbf{\footnotesize{Dimens√£o: Exatid√£o}}}
            ''')
    dash_6_col_0_2.dataframe(df_dados_dados_ind_aprend_maquinas)

    #---------------------------------------

    # Dados dos Indicadores de Qualidade Fase Fus√£o de Dados
    dados_ind_fusao_dados=[['Histograma','MSE']]
    
    # Inicializar Dataframe para exibi√ß√£o de Indicadores Fase de Fus√£o de Dados
    df_dados_ind_dados_ind_fusao_dados=pd.DataFrame(dados_ind_fusao_dados, columns=['Precis√£o','Acur√°cia'], index=["Indicadores:"])

    # Exibi√ß√£o de T√≠tulo e Indicadores da Fase de Fus√£o de Dados
    dash_6_col_0_2.latex(r'''
            \textcolor{black}{\textbf{Indicadores de Qualidade - Fase Fus√£o de Dados:}}\\
            \textcolor{blue}{\textbf{\footnotesize{Dimens√µes: Exatid√£o, Janela Temporal de Coleta}}}
            ''')
    dash_6_col_0_2.dataframe(df_dados_ind_dados_ind_fusao_dados)

         
    #****************************************************************
    # Exibir o Dataframes e Demais dados na Aba "Qualidade de Dados"
    #****************************************************************
    with tab:
        # Configura√ß√µes Gerais - "Qualidade de Dados":
            # -> Cria√ß√£o dos Conteiners
        qualidade_segmentacao = tab.expander("Qualidade de Dados - Segmenta√ß√£o")
        qualidade_extracao_caracteristicas = tab.expander("Qualidade de Dados - Extra√ß√£o de Caracter√≠sticas")
        qualidade_aprendizado_maquinas = tab.expander("Qualidade de Dados - Aprendizado de M√°quinas")
        qualidade_fusao_dados = tab.expander("Qualidade de Dados - Fus√£o de Dados")
        qualidade_dados_DW=tab.expander("Qualidade de Dados - Base de Dados (Data Warehouse)")                 
                
        #----------------------------------------------------------------------------
        # Qualidade na Etapa de Segmenta√ß√£o
        #----------------------------------------------------------------------------

        # Inserir nova coluna com os dados de √≠ndice das Imagens Segmentadas
        df_consulta_qualidade.insert(5, "nova_coluna", lista_consulta_qualidade, True)
        # Nomear as colunas do Dataframe
        df_consulta_qualidade.columns=['M√©trica MSE','M√©trica PSNR','M√©trica SSIM','Outliers Sementes','Outliers Sementes - C√°lculo','IMG_SEGMENTADA']
        # Configurar os √≠ndices do Dataframe com os valores de √≠ndices das imagens segmentadas
        df_consulta_qualidade= df_consulta_qualidade.set_index('IMG_SEGMENTADA')

        # Conteiner de Expans√£o
        with qualidade_segmentacao:

            # Exibi√ß√£o de T√≠tulo e Figura do Histograma da Imagem Segmentada
            qualidade_segmentacao.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Histograma:}}
            ''')
            qualidade_segmentacao.pyplot(fig_histograma)

            # Defini√ß√£o de Colunas para o Conteiner
            dash_6_col_1_1, dash_6_col_1_2, dash_6_col_1_3= st.columns([0.8,1.8,0.8], gap="medium")

            # Exibi√ß√£o de T√≠tulo e M√©tricas em formato de "Tabela" (Dataframe)
            dash_6_col_1_2.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Imagens Segmentadas}} \\
            \textcolor{black}{\textit{(M√©tricas: Filtro Mediana e Similaridade; Outliers C√°lculo Estat√≠stico)}}
            ''')
                #->  Formata√ß√£o de Precis√£o - C√°lculos Estat√≠sticos
            dash_6_col_1_2.dataframe(df_consulta_qualidade.style.format({'M√©trica MSE':'{:.3f}',\
                'M√©trica PSNR':'{:.3f}','M√©trica SSIM':'{:.3f}'}))   
        
        # Exibi√ß√£o fora do Conteiner
            #-> T√≠tulo e exibi√ß√£o dos Gr√°ficos de Boxplot
        qualidade_segmentacao.latex(r'''
        \textcolor{black}{\textbf{Qualidade de Dados - Sementes "Sem Processamento" e "Com Processamento" (Outliers):}}
        ''')
        qualidade_segmentacao.pyplot(fig_boxplot) 

        #----------------------------------------------------------------------------
        # Qualidade na Etapa de Extra√ß√£o de Caracter√≠sticas
        #----------------------------------------------------------------------------

        # Conteiner de Expans√£o
        with qualidade_extracao_caracteristicas:
            # Defini√ß√£o de Colunas para o Conteiner
            dash_6_col_2_1, dash_6_col_2_2, dash_6_col_2_3= st.columns([0.2,0.9,1.5], gap="medium")

            # Dados para Dimensionalidade
            dados_dim=[['130','5']]
            
            # Inicializar Dataframe para exibi√ß√£o de Dados Est√°ticos (Dimensionalidade)
            #   => Estes dados s√£o fixos para o trabalho e por esta raz√£o n√£o foram armazenados no Banco Oracle
            df_dimensionalidade=pd.DataFrame(dados_dim, columns=['Original','Reduzida'], index=["Dimens√£o:"])            

            # Exibir o T√≠tulo e os Dados de Redu√ß√£o de Dimensionalidade
                # -> Dados de entrada no Classificador originados da Extra√ß√£o de Caracter√≠sticas
            dash_6_col_2_2.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Redu√ß√£o de Dimensionalidade:}}
            ''')
            dash_6_col_2_2.dataframe(df_dimensionalidade)

        #----------------------------------------------------------------------------
        # Qualidade na Etapa de Aprendizado de M√°quinas
        #----------------------------------------------------------------------------
        
        # Inserir nova coluna com os dados de √≠ndice de Inst√¢ncias Duplicadas
        df_instancias_duplicadas.insert(1, "nova_coluna", 'Utiliza√ß√£o: 100%', True)
        # Nomear as colunas do Dataframe
        df_instancias_duplicadas.columns=['Tuplas Bin√°rias Limpas','% Utiliza√ß√£o:']
        # Configurar os √≠ndices do Dataframe com os valores de √≠ndices de Inst√¢ncias Duplicadas
        df_instancias_duplicadas= df_instancias_duplicadas.set_index('% Utiliza√ß√£o:')

        # Conteiner
        with qualidade_aprendizado_maquinas:
            dash_6_col_3_1, dash_6_col_3_2, dash_6_col_3_3= st.columns([0.1,1.0,1.5], gap="medium")
           
            # Exibir o T√≠tulo e os Dados de Inst√¢ncias Duplicadas
                # -> Dados de entrada no Classificador originados da Extra√ß√£o de Caracter√≠sticas
            dash_6_col_3_2.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Inst√¢ncias Duplicadas:}}
            ''')
            dash_6_col_3_2.dataframe(df_instancias_duplicadas)

            # Exibir o T√≠tulo e os Dados do Relat√≥rio de Classifica√ß√£o
            dash_6_col_3_2.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Relat√≥rio de Classifica√ß√£o:}}
            ''')
            dash_6_col_3_2.text(df_consulta_relat_classificacao.iloc[0]['relatorioClassificacao'])

            # Exibir o T√≠tulo e a Figuras: (1) Matriz de Confus√£o e (2) Curva ROC
            qualidade_aprendizado_maquinas.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Matriz de Confus√£o e Curva ROC:}}
            ''')
            qualidade_aprendizado_maquinas.pyplot(fig_matriz_curva_classificacao)

        #----------------------------------------------------------------------------
        # Qualidade na Etapa de Fus√£o de Dados
        #----------------------------------------------------------------------------
        
        # Cointeiner
        with qualidade_fusao_dados:
            # Defini√ß√£o de Colunas para o Conteiner
            dash_6_col_4_1, dash_6_col_4_2, dash_6_col_4_3= st.columns([0.2,0.9,2.0], gap="medium")

            # Exibir o T√≠tulo do Relat√≥rio de Qualidade de Dados - Fus√£o de Dados 
            dash_6_col_4_2.latex(r'''
            \textcolor{black}{\textbf{An√°lise da Qualidade de Dados - Etapa Fus√£o de Dados:}}
            ''')
            dash_6_col_4_2.pyplot(fig_qualidade_fusao)
        
        #----------------------------------------------------------------------------
        # Qualidade na Etapa de Base de Dados: Data Warehouse (Oracle Cloud)
        #----------------------------------------------------------------------------

        # Cointeiner
        with qualidade_dados_DW:
            # Exibir o T√≠tulo do Relat√≥rio de Qualidade de Dados do Data Warehouse 
            qualidade_dados_DW.latex(r'''
            \textcolor{black}{\textbf{Qualidade de Dados - Base de Dados: Data Warehouse (Oracle Cloud):}}
            ''')

            # Abertura de Arquivo PDF dos Relat√≥rios Qualidade de Dados 
            with open(arquivo_4,"rb") as f:
                        base64_pdf = base64.b64encode(f.read()).decode('utf-8')

            pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="900" height="800" type="application/pdf"></iframe>'
            qualidade_dados_DW.markdown(pdf_display, unsafe_allow_html=True)
        

#------------------------------------------------------------------------------------------------
# Chamada de Fun√ß√£o para Exibir Relat√≥rios Originados do Data Warehouse
def exibirRelatorios_DW(tab, arquivo_1, arquivo_2, arquivo_3):
    
    relatorios_conteiner= dash_col_0_2.expander("Exibir Relat√≥rios - Aux√≠lio a Tomada de Decis√£o:")
    
    #****************************************************************************************************************
    # Exibir o Conteiner de Expans√£o - Requisitos 1 "Aba Dashboard": Exibir Relat√≥rios - Aux√≠lio a Tomada de Decis√£o:
    #****************************************************************************************************************
    requisitos_1 = relatorios_conteiner.expander("Requisitos de Projeto: 1")
    requisitos_1.markdown("""
        <table border="2" cellpadding="0" cellspacing="0" style="width:900px">
            <tbody>
                <tr>
                    <td style="text-align:center"><strong>Assunto 1: Influ&ecirc;ncia das Vari&aacute;veis Clim&aacute;ticas na Favorabilidade da Ferrugem Asi&aacute;tica da Soja:&nbsp;</strong></td>
                </tr>
                <tr>
                    <td><u><strong>Descri&ccedil;&atilde;o:</strong></u></td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do ano que a Temperatura (m&iacute;nima, m&aacute;xima) pode favorecer o aparecimento da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do ano que a Temperatura (Faixa de Temperatura) pode favorecer o aparecimento da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura que a Umidade Relativa contribuiu para o aparecimento da doen&ccedil;a da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura que o Ponto de Orvalho contribuiu para o aparecimento da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura que a Precipita&ccedil;&atilde;o contribui para o aparecimento da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura que a Per&iacute;odo M&iacute;nimo de Molhamento Foliar contribui para o aparecimento da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura que a Per&iacute;odo de Molhamento Foliar contribui para o aparecimento da FAS?</td>
                </tr>
            </tbody>
        </table>
        """, unsafe_allow_html=True)

    # Abertura de Arquivo PDF dos Relat√≥rios Assunto 1 - Data Warehouse
    with open(arquivo_1,"rb") as f:
                base64_pdf = base64.b64encode(f.read()).decode('utf-8')

    pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="900" height="460" type="application/pdf"></iframe>'
    requisitos_1.markdown(pdf_display, unsafe_allow_html=True)

    #****************************************************************************************************************
    # Exibir o Conteiner de Expans√£o - Requisitos 2 "Aba Dashboard": Exibir Relat√≥rios - Aux√≠lio a Tomada de Decis√£o:
    #****************************************************************************************************************

    requisitos_2 = relatorios_conteiner.expander("Requisitos de Projeto: 2")
    requisitos_2.markdown("""
        <table border="2" cellpadding="0" cellspacing="0" style="width:900px">
            <tbody>
                <tr>
                    <td style="text-align:center"><strong>Assunto 2: Contabiliza&ccedil;&atilde;o da Favorabilidade Baixa, M&eacute;dia e Alta por Ano:</strong></td>
                </tr>
                <tr>
                    <td><strong><u>Descri&ccedil;&atilde;o:</u></strong></td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura, que compreende a etapa de plantio e colheita por Regi&atilde;o, mostra a favorabilidade Baixa da FAS?</td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura, que compreende a etapa de plantio e colheita por Regi&atilde;o, mostra a favorabilidade M&eacute;dia da FAS?</td>
                </tr>
                <tr>
                    <td>
                    <p><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do Ciclo de Cultura, que compreende a etapa de plantio e colheita por Regi&atilde;o, mostra a favorabilidade Alta da FAS?</p>
                    </td>
                </tr>
            </tbody>
        </table>
        """, unsafe_allow_html=True)

    # Abertura de Arquivo PDF dos Relat√≥rios Assunto 2 - Data Warehouse
    with open(arquivo_2,"rb") as f:
                base64_pdf = base64.b64encode(f.read()).decode('utf-8')

    pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="900" height="600" type="application/pdf"></iframe>'
    requisitos_2.markdown(pdf_display, unsafe_allow_html=True)
    
    #****************************************************************************************************************
    # Exibir o Conteiner de Expans√£o - Requisitos 3 "Aba Dashboard": Exibir Relat√≥rios - Aux√≠lio a Tomada de Decis√£o:
    #****************************************************************************************************************
    requisitos_3 = relatorios_conteiner.expander("Requisitos de Projeto: 3")
    requisitos_3.markdown("""
        <table border="2" cellpadding="0" cellspacing="0" style="width:900px">
            <tbody>
                <tr>
                    <td style="text-align:center"><strong>Assunto 3: Influ&ecirc;ncia da Imagem da Folha de Soja na Favorabilidade da Ferrugem Asi&aacute;tica da Soja:</strong></td>
                </tr>
                <tr>
                    <td><strong><u>Descri&ccedil;&atilde;o:</u></strong></td>
                </tr>
                <tr>
                    <td><span style="font-size:14px">&nbsp;Qual o per&iacute;odo do ano, que compreende a etapa de plantio e colheita (R5 e R6) por Regi&atilde;o, que a informa&ccedil;&atilde;o da Imagem da Folha de Soja contribuiu para o aparecimento da doen&ccedil;a da FAS?</span></td>
                </tr>
            </tbody>
        </table>
        """, unsafe_allow_html=True)
    
    # Abertura de Arquivo PDF dos Relat√≥rios Assunto 3 - Data Warehouse
    with open(arquivo_3,"rb") as f:
                base64_pdf = base64.b64encode(f.read()).decode('utf-8')

    pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="900" height="600" type="application/pdf"></iframe>'
    requisitos_3.markdown(pdf_display, unsafe_allow_html=True)
                  
#==========================================================================

# Fun√ß√£o para contabizar contagem de tempo fun√ß√µes Cadeia Oculta de Markov

def contabilizarTempo(t0,t):
    # C√°lculo de c(t) - Tempo de Processamento
    ct=t/t0
    
    # Imprimir os resultados do C√°lculo do Tempo de Processamento
    print("\nContagem de Tempo - Abordagem de Markov:")
    print("Tempo Inicial(t0): " + str(t0) +  "\nTempo Final(t): " + str(t) + "\nC(t): " + str(ct))

    return ct

#==========================================================================

# Fun√ß√£o para Calcular Qualidade de Dados - Fus√£o de Dados

def calcularQualidadeFusao(ct, dadosMarkov):    

    vetor_resultado_linhas=pd.DataFrame([[int(dadosMarkov.iloc[0,0]),dadosMarkov.iloc[0,1],dadosMarkov.iloc[0,2],dadosMarkov.iloc[0,3], \
                                                dadosMarkov.iloc[0,4],dadosMarkov.iloc[0,5],dadosMarkov.iloc[0,6]]]).to_numpy()
    
    print("Entrada gr√°fico qualidade fus√£o: ", vetor_resultado_linhas)

    # Somat√≥rio 
    somatorio=1+2*((1-(1/7))+(1-(2/7))+(1-(3/7))+(1-(4/7))+(1-(5/7))+(1-(6/7)))

    # Vari√¢ncia do Observ√°vel (Caso especial de Autocorrela√ß√£o)
    #   -> Entrada dados de entrada Cadeia de Markov
    var_observavel=np.var(vetor_resultado_linhas)/7 * (somatorio * ct)    
    
    return var_observavel

#==========================================================================

# Fun√ß√£o Gr√°fico Qualidade de Dados - Fus√£o de Dados

def graficoQualidadeFusaoDados(dadosCalculo):
    # Eixo "x"
    #   -> Pontos de entrada (Dados Calculados)
    x = []
    x.append(dadosCalculo)
    # Eixo "y"
    y = np.arange(len(x))

    # C√°lculo do desvio padr√£o por ponto no c√°lculo
    std = []
    # Percorre os dados de entrada e calcula o desvio padr√£o "por ponto"
    for i in range(len(x)):    
        std.append(np.sqrt(x[i]))       

    # Plotar o gr√°fico
    fig_qualidade_fusao = plt.figure(figsize = (8,5))
    plt.errorbar(y, x, yerr=std, fmt='o', color='blue', 
                 mew=0.5, ms=4, ecolor='black', capsize=4, elinewidth=0.4)
    plt.ylim(-0.4, 1.4)
    plt.xlabel('Entrada dados Markov')
    plt.ylabel('Estado das Vari√°veis')    
    plt.title('Gr√°fico Autoconsist√™ncia vs Erro Razo√°vel (Desvio Padr√£o)')
    
    return fig_qualidade_fusao

    #==========================================================================

# Fun√ß√£o para Chamadas das Fun√ß√µes - Intera√ß√£o com a Interface de Usu√°rio
def processar(input_data_teste):

    #------------------------------------------------------------------------------------------------
    #                                       CHAMADAS DE FUN√á√ïES
    #------------------------------------------------------------------------------------------------
  
    #Chamada de Fun√ß√£o para Entrada de Data da Janela de Tempo
    #Informar a Janela de Tempo como "Intervalo"
    DataInicial, DataFinal = dataJanelaTempo(intervalo,0,input_data_teste)

    #=======================================================================

    # Chamada de fun√ß√£o para conex√£o com o Oracle Autonomous Database
    connection=conexaoAutonomousDatabase(fun.PYTHON_USERNAME,fun.PYTHON_PASSWORD,fun.PYTHON_CONNECTSTRING)

    #=======================================================================

    # Chamada de Fun√ß√£o para consulta de Dados Clim√°ticos (Janela de Tempo) no Banco ORACLE
    df_consulta_bd=consultarDadosClimaticos(connection,DataInicial,DataFinal)

    #=======================================================================

    # Chamada de Fun√ß√£o para gerar a lista de dados interpolados, de acordo com as Vari√°veis clim√°ticas
    X, lista_interpolacao, labels=preparaDadosInterpolacao(df_consulta_bd)

    #=======================================================================

    # Chamada de Fun√ß√£o para Processamento de Interpola√ß√£o
    df_interpolar,new_y=processarInterpolacao(X,labels,lista_interpolacao,tab3,0)

    #=======================================================================

    # Chamada de Fun√ß√£o para processamento dos valores interpolados para completar (se necess√°rio) o conjunto de dados com os dados faltantes
    df_consulta_bd=processarCompletarDadosInterpolados(df_interpolar,df_consulta_bd,tab3)

    #=======================================================================

    # Chamada de Fun√ß√£o Regra 01 -> (Per√≠odo de Molhamento Foliar)
    medianaRegra_01, regra_1, flag_regra_1=regra01(df_consulta_bd,casas_decimais)

    #=======================================================================

    # Chamada de Fun√ß√£o Regra 02 -> (Per√≠odo M√≠nimo de Molhamento Foliar)
    medianaRegra_02, regra_2, flag_regra_2=regra02(df_consulta_bd,casas_decimais)

    #=======================================================================

    #Chamada de Fun√ß√£o Regra 03 
    medianaRegra_03_1, medianaRegra_03_2, regra_3, flag_regra_3, flag_df=regra03(df_consulta_bd,casas_decimais)

    #=======================================================================

    # Chamada Fun√ß√£o Regra 04
    regra_4, regra_4_valor, flag_regra_4=regra04(df_consulta_bd,casas_decimais)

    #=======================================================================

    # Chamada de Fun√ß√£o Regra 05
    regra_5, regra_5_valor, flag_regra_5=regra05(df_consulta_bd,casas_decimais)

    #=======================================================================

    # Chamada de Fun√ß√£o Regra 06
    regra_6, medianaRegra_06, flag_regra_6=regra06(df_consulta_bd,casas_decimais)

    #=======================================================================

    # Chamada de Fun√ß√£o Regra 07
    regra_7, df_consulta_img, flag_regra_7, df_consulta_relat_classificacao, \
        fig_matriz_curva_classificacao,df_instancias_duplicadas,df_id_imagem_clima_favorab=regra07(DataInicial,DataFinal)
    
    #=======================================================================

    # Chamada de Fun√ß√£o para Exibir Relat√≥rios Originados do Data Warehouse
    exibirRelatorios_DW(tab1, relatorio_assunto_1, relatorio_assunto_2, relatorio_assunto_3)

    #=======================================================================

    #Chamada de Fun√ß√£o para Exibir Imagens Segmentadas participantes da Janela de Tempo
    df_consulta_caract, fig1, lista_img_segment, df_consulta_sementes, lista_consulta_sementes,\
        df_consulta_estatistico, lista_consulta_estatistico, df_consulta_qualidade, \
        lista_consulta_qualidade, fig_boxplot=exibirImagensParticipantes(df_consulta_img, tab1)

    #=======================================================================
    
    #Chamada de Fun√ß√£o para Exibir Histogramas
    fig_histograma=exibirHistogramas(df_consulta_img)

    #=======================================================================

    # Fun√ß√£o para Contagem de Ocorr√™ncias por Regras
    dados_regras, totalJanela, ocorrenciasRegra_1, ocorrenciasRegra_2, ocorrenciasRegra_3, ocorrenciasRegra_4, \
    ocorrenciasRegra_5, ocorrenciasRegra_6, ocorrenciasRegra_7=contagemOcorrencias(df_consulta_bd,             \
        regra_1,regra_2,regra_3,regra_4,regra_5,regra_6,regra_7,medianaRegra_01,medianaRegra_02,regra_4_valor, \
        regra_5_valor,medianaRegra_06, casas_decimais, flag_df, medianaRegra_03_1, medianaRegra_03_2)

    #=======================================================================

    # Chamada de Fun√ß√£o para Plotar gr√°fico de ocorr√™ncias
    x,y=plotarOcorrencias(ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,ocorrenciasRegra_4,ocorrenciasRegra_5,\
    ocorrenciasRegra_6,ocorrenciasRegra_7, tab1)

    #=======================================================================

    # In√≠cio da Contagem de Tempo para Medi√ß√£o de tempo Abordagem de Markov (Tempo Inicial t0)
        # => Tempo em Milisegundos
    t0=timeit.default_timer()
    # Chamada de Fun√ß√£o para Carregar a Tabela Verdade (Abordagem Markov)
    df_tab_verdade=carregarTabelaVerdade()

    #=======================================================================

    # Chamada de Fun√ß√£o para encontrar a Combina√ß√£o da Tabela - Descobrir o Estado correspondente    
    vetor_resultado, vetor_compara, vetor_ocorrencias, text=encontraCombinacao(ocorrenciasRegra_1,ocorrenciasRegra_2,ocorrenciasRegra_3,\
        ocorrenciasRegra_4,ocorrenciasRegra_5,ocorrenciasRegra_6,ocorrenciasRegra_7,df_tab_verdade, tab1)    

    #=======================================================================

    # Chamada de Fun√ß√£o para capturar o √≠ndice do resultado do "vetor_resultado"    
    df_img_cli_favorab,text=capturarIndiceFavorab(vetor_resultado,text,df_consulta_bd)    

    #=======================================================================

    # Chamada de Fun√ß√£o para identificar a probabilidade do Estado Atual    
    probab_estado, probab_previsao, matriz_transicao, probab_inicial, text=probabilidadeEstadoAtual(text,vetor_resultado)    

    #=======================================================================

    # Chamada de Fun√ß√£o para identificar o Estado do Atual da Favorabilidade FAS
    previsao_prox, resultado_markov, text=identificaEstadoAtual(vetor_resultado,\
        probab_previsao, text, tab2)    

    #=======================================================================
    
    # Chamada de Fun√ß√£o para Exibi√ß√£o do Modelo Gr√°fico
    exibir_img_modelo(resultado_markov, tab1)
    # Finalizar contagem de tempo para Medi√ß√£o de tempo Abordagem de Markov (Tempo Inicial t)
        # => Tempo em Milisegundos
    t=timeit.default_timer()          

    #====================================================================================

    # Chamada de Fun√ß√£o para contabizar contagem de tempo fun√ß√µes Cadeia Oculta de Markov
    ct= contabilizarTempo(t0,t)
    
    #====================================================================================

    # Chamada de Fun√ß√£o para Calcular Qualidade de Dados - Fus√£o de Dados

    var_observavel= calcularQualidadeFusao(ct, vetor_resultado)

    #====================================================================================

    # Chamada de Fun√ß√£o Gr√°fico Qualidade de Dados - Fus√£o de Dados

    fig_qualidade_fusao= graficoQualidadeFusaoDados(var_observavel)

    #====================================================================================
   
    # Chamada de Fun√ß√£o para Exibir Recomenda√ß√µes na Aba Aplica√ß√£o WEB
    df_recomendacoes=ExibirRecomendacoes(tab2, resultado_markov, df_id_imagem_clima_favorab)

    #=======================================================================
    
    # Chamada de Fun√ß√£o para Exibir Caracter√≠sticas das Imagens Segmentadas
    #   Aba "Processamento de Imagens"
    exibirDadosProcessamentoImagens(df_consulta_caract, tab5, fig1, lista_img_segment, df_consulta_sementes,\
         lista_consulta_sementes, df_consulta_estatistico, lista_consulta_estatistico)

    #=======================================================================
   
    # Chamada de Fun√ß√£o para Exibir os Dados de Qualidade das Imagens Segmentadas
    #   Aba "Qualidade de Dados"
    exibir_dados_qualidade_dados(tab6, df_consulta_qualidade, lista_consulta_qualidade, fig_histograma, fig_boxplot,\
                                 df_consulta_relat_classificacao, fig_matriz_curva_classificacao, df_instancias_duplicadas, relatorio_qualidade_DW, fig_qualidade_fusao)
    
    #=======================================================================
    
    # Chamada de Fun√ß√£o para calcular Pr√≥ximas Previs√£o das Probabilidades
    previsao_1, previsao_2, finalizado=calcularPrevisoes(matriz_transicao, probab_inicial,previsao_prox)

    #=======================================================================
    
    # Mensagem de Finaliza√ß√£o do Ciclo de Processamento
    #   -> Exibir a mensagem no canto esquerdo inferior da Barra Lateral (sidebar)
    if finalizado == True:
        with tab1:
            st.sidebar.success('Processamento do M√©todo Finalizado com Sucesso!', icon="‚úÖ")

#========================================================================================================

# Chamada de Fun√ß√£o para os componentes de filtro para entrada de dados - Dashboard
data_selecionada, botao=definirFiltrosEntrada()
input_data_teste=data_selecionada

if botao:
    processar(input_data_teste)

#========================================== FIM =========================================================